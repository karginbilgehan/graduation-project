
ds18b2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800724c  0800724c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001dc  08007430  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08007430  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f07  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f0  00000000  00000000  00031113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000182b1  00000000  00000000  000353c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c61c  00000000  00000000  0004d671  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094f08  00000000  00000000  00059c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eeb95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f60  00000000  00000000  000eec10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fd0 	.word	0x08006fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006fd0 	.word	0x08006fd0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f94d 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f004 fd70 	bl	80058e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f965 	bl	80010fe <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f92d 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000004 	.word	0x20000004
 8000e94:	20000214 	.word	0x20000214

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000214 	.word	0x20000214

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_Delay+0x40>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d004      	beq.n	8001134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00c      	b.n	800114e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2205      	movs	r2, #5
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e159      	b.n	800142c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8148 	bne.w	8001426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0xfc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a2 	beq.w	8001426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b56      	ldr	r3, [pc, #344]	; (8001440 <HAL_GPIO_Init+0x2e4>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a55      	ldr	r2, [pc, #340]	; (8001440 <HAL_GPIO_Init+0x2e4>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x2e4>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a48      	ldr	r2, [pc, #288]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x202>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_GPIO_Init+0x2f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x1fe>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a46      	ldr	r2, [pc, #280]	; (8001450 <HAL_GPIO_Init+0x2f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x1fa>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a45      	ldr	r2, [pc, #276]	; (8001454 <HAL_GPIO_Init+0x2f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x1f6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_GPIO_Init+0x2fc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x1f2>
 800134a:	2304      	movs	r3, #4
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800134e:	2307      	movs	r3, #7
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4934      	ldr	r1, [pc, #208]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <HAL_GPIO_Init+0x300>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_GPIO_Init+0x300>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_GPIO_Init+0x300>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <HAL_GPIO_Init+0x300>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_GPIO_Init+0x300>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_GPIO_Init+0x300>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_GPIO_Init+0x300>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_GPIO_Init+0x300>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f aea2 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	3724      	adds	r7, #36	; 0x24
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e001      	b.n	8001482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e11f      	b.n	8001716 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f004 fa22 	bl	8005934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001528:	f001 fb8e 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800152c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a7b      	ldr	r2, [pc, #492]	; (8001720 <HAL_I2C_Init+0x25c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d807      	bhi.n	8001548 <HAL_I2C_Init+0x84>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a7a      	ldr	r2, [pc, #488]	; (8001724 <HAL_I2C_Init+0x260>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	e006      	b.n	8001556 <HAL_I2C_Init+0x92>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a77      	ldr	r2, [pc, #476]	; (8001728 <HAL_I2C_Init+0x264>)
 800154c:	4293      	cmp	r3, r2
 800154e:	bf94      	ite	ls
 8001550:	2301      	movls	r3, #1
 8001552:	2300      	movhi	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0db      	b.n	8001716 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a72      	ldr	r2, [pc, #456]	; (800172c <HAL_I2C_Init+0x268>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9b      	lsrs	r3, r3, #18
 8001568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a64      	ldr	r2, [pc, #400]	; (8001720 <HAL_I2C_Init+0x25c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d802      	bhi.n	8001598 <HAL_I2C_Init+0xd4>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	e009      	b.n	80015ac <HAL_I2C_Init+0xe8>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_I2C_Init+0x26c>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	3301      	adds	r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4956      	ldr	r1, [pc, #344]	; (8001720 <HAL_I2C_Init+0x25c>)
 80015c8:	428b      	cmp	r3, r1
 80015ca:	d80d      	bhi.n	80015e8 <HAL_I2C_Init+0x124>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e59      	subs	r1, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	bf38      	it	cc
 80015e4:	2304      	movcc	r3, #4
 80015e6:	e04f      	b.n	8001688 <HAL_I2C_Init+0x1c4>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_I2C_Init+0x150>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	e012      	b.n	800163a <HAL_I2C_Init+0x176>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1e58      	subs	r0, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	0099      	lsls	r1, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x17e>
 800163e:	2301      	movs	r3, #1
 8001640:	e022      	b.n	8001688 <HAL_I2C_Init+0x1c4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10e      	bne.n	8001668 <HAL_I2C_Init+0x1a4>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e58      	subs	r0, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	440b      	add	r3, r1
 8001658:	fbb0 f3f3 	udiv	r3, r0, r3
 800165c:	3301      	adds	r3, #1
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001666:	e00f      	b.n	8001688 <HAL_I2C_Init+0x1c4>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6911      	ldr	r1, [r2, #16]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	000186a0 	.word	0x000186a0
 8001724:	001e847f 	.word	0x001e847f
 8001728:	003d08ff 	.word	0x003d08ff
 800172c:	431bde83 	.word	0x431bde83
 8001730:	10624dd3 	.word	0x10624dd3

08001734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	460b      	mov	r3, r1
 8001742:	817b      	strh	r3, [r7, #10]
 8001744:	4613      	mov	r3, r2
 8001746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff fba6 	bl	8000e98 <HAL_GetTick>
 800174c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b20      	cmp	r3, #32
 8001758:	f040 80e0 	bne.w	800191c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2319      	movs	r3, #25
 8001762:	2201      	movs	r2, #1
 8001764:	4970      	ldr	r1, [pc, #448]	; (8001928 <HAL_I2C_Master_Transmit+0x1f4>)
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fc56 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001772:	2302      	movs	r3, #2
 8001774:	e0d3      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_I2C_Master_Transmit+0x50>
 8001780:	2302      	movs	r3, #2
 8001782:	e0cc      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d007      	beq.n	80017aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2221      	movs	r2, #33	; 0x21
 80017be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2210      	movs	r2, #16
 80017c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	893a      	ldrh	r2, [r7, #8]
 80017da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_I2C_Master_Transmit+0x1f8>)
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017ec:	8979      	ldrh	r1, [r7, #10]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fac2 	bl	8001d7c <I2C_MasterRequestWrite>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e08d      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001818:	e066      	b.n	80018e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fcd0 	bl	80021c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00d      	beq.n	8001846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b04      	cmp	r3, #4
 8001830:	d107      	bne.n	8001842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06b      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b04      	cmp	r3, #4
 8001882:	d11b      	bne.n	80018bc <HAL_I2C_Master_Transmit+0x188>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d017      	beq.n	80018bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	6a39      	ldr	r1, [r7, #32]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fcc0 	bl	8002246 <I2C_WaitOnBTFFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d107      	bne.n	80018e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e01a      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d194      	bne.n	800181a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800191c:	2302      	movs	r3, #2
  }
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	00100002 	.word	0x00100002
 800192c:	ffff0000 	.word	0xffff0000

08001930 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	460b      	mov	r3, r1
 800193e:	817b      	strh	r3, [r7, #10]
 8001940:	4613      	mov	r3, r2
 8001942:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff faa8 	bl	8000e98 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	f040 820b 	bne.w	8001d6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2319      	movs	r3, #25
 800195e:	2201      	movs	r2, #1
 8001960:	497c      	ldr	r1, [pc, #496]	; (8001b54 <HAL_I2C_Master_Receive+0x224>)
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fb58 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	e1fe      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_I2C_Master_Receive+0x50>
 800197c:	2302      	movs	r3, #2
 800197e:	e1f7      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d007      	beq.n	80019a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2222      	movs	r2, #34	; 0x22
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2210      	movs	r2, #16
 80019c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	893a      	ldrh	r2, [r7, #8]
 80019d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a5c      	ldr	r2, [pc, #368]	; (8001b58 <HAL_I2C_Master_Receive+0x228>)
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e8:	8979      	ldrh	r1, [r7, #10]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fa46 	bl	8001e80 <I2C_MasterRequestRead>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1b8      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e18c      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11b      	bne.n	8001a6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e16c      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d11b      	bne.n	8001aae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	e14c      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ad4:	e138      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	f200 80f1 	bhi.w	8001cc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d123      	bne.n	8001b30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fbeb 	bl	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e139      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b2e:	e10b      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d14e      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4906      	ldr	r1, [pc, #24]	; (8001b5c <HAL_I2C_Master_Receive+0x22c>)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fa68 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e10e      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
 8001b52:	bf00      	nop
 8001b54:	00100002 	.word	0x00100002
 8001b58:	ffff0000 	.word	0xffff0000
 8001b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd4:	e0b8      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4966      	ldr	r1, [pc, #408]	; (8001d78 <HAL_I2C_Master_Receive+0x448>)
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 fa19 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0bf      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	494f      	ldr	r1, [pc, #316]	; (8001d78 <HAL_I2C_Master_Receive+0x448>)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f9eb 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e091      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cc0:	e042      	b.n	8001d48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fafe 	bl	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e04c      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d118      	bne.n	8001d48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f aec2 	bne.w	8001ad6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00010004 	.word	0x00010004

08001d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d006      	beq.n	8001da6 <I2C_MasterRequestWrite+0x2a>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <I2C_MasterRequestWrite+0x2a>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001da4:	d108      	bne.n	8001db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e00b      	b.n	8001dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	2b12      	cmp	r3, #18
 8001dbe:	d107      	bne.n	8001dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f91b 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e035      	b.n	8001e6e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e0a:	d108      	bne.n	8001e1e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	e01b      	b.n	8001e56 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	11db      	asrs	r3, r3, #7
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 0306 	and.w	r3, r3, #6
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f063 030f 	orn	r3, r3, #15
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	490f      	ldr	r1, [pc, #60]	; (8001e78 <I2C_MasterRequestWrite+0xfc>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f942 	bl	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e010      	b.n	8001e6e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e4c:	897b      	ldrh	r3, [r7, #10]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <I2C_MasterRequestWrite+0x100>)
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f932 	bl	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	00010008 	.word	0x00010008
 8001e7c:	00010002 	.word	0x00010002

08001e80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d006      	beq.n	8001eba <I2C_MasterRequestRead+0x3a>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <I2C_MasterRequestRead+0x3a>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e00b      	b.n	8001ee4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d107      	bne.n	8001ee4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f891 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e078      	b.n	8002008 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f1e:	d108      	bne.n	8001f32 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f20:	897b      	ldrh	r3, [r7, #10]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	e05e      	b.n	8001ff0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f32:	897b      	ldrh	r3, [r7, #10]
 8001f34:	11db      	asrs	r3, r3, #7
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 0306 	and.w	r3, r3, #6
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f063 030f 	orn	r3, r3, #15
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4930      	ldr	r1, [pc, #192]	; (8002010 <I2C_MasterRequestRead+0x190>)
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f8b8 	bl	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e053      	b.n	8002008 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4929      	ldr	r1, [pc, #164]	; (8002014 <I2C_MasterRequestRead+0x194>)
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f8a8 	bl	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e043      	b.n	8002008 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f830 	bl	8002018 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e017      	b.n	8002008 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001fd8:	897b      	ldrh	r3, [r7, #10]
 8001fda:	11db      	asrs	r3, r3, #7
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0306 	and.w	r3, r3, #6
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f063 030e 	orn	r3, r3, #14
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <I2C_MasterRequestRead+0x194>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f865 	bl	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010008 	.word	0x00010008
 8002014:	00010002 	.word	0x00010002

08002018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002028:	e025      	b.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d021      	beq.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002032:	f7fe ff31 	bl	8000e98 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d116      	bne.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e023      	b.n	80020be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10d      	bne.n	800209c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	e00c      	b.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d0b6      	beq.n	800202a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d4:	e051      	b.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e4:	d123      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f043 0204 	orr.w	r2, r3, #4
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e046      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d021      	beq.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe feaf 	bl	8000e98 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d116      	bne.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e020      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10c      	bne.n	800219e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e00b      	b.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d18d      	bne.n	80020d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	e02d      	b.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f8ce 	bl	8002374 <I2C_IsAcknowledgeFailed>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e02d      	b.n	800223e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d021      	beq.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7fe fe55 	bl	8000e98 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d116      	bne.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d1ca      	bne.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002252:	e02d      	b.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f88d 	bl	8002374 <I2C_IsAcknowledgeFailed>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e02d      	b.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d021      	beq.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226c:	f7fe fe14 	bl	8000e98 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	d302      	bcc.n	8002282 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d116      	bne.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d1ca      	bne.n	8002254 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d4:	e042      	b.n	800235c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d119      	bne.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e029      	b.n	800236c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002318:	f7fe fdbe 	bl	8000e98 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d1b5      	bne.n	80022d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238a:	d11b      	bne.n	80023c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002394:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e25b      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4ba0      	ldr	r3, [pc, #640]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e236      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x74>
 800243a:	4b91      	ldr	r3, [pc, #580]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a83      	ldr	r2, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a80      	ldr	r2, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fd04 	bl	8000e98 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd00 	bl	8000e98 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1fb      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xc0>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fcf0 	bl	8000e98 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fcec 	bl	8000e98 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1e7      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1bb      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fca5 	bl	8000e98 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fca1 	bl	8000e98 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e19c      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4940      	ldr	r1, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fc84 	bl	8000e98 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002594:	f7fe fc80 	bl	8000e98 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e17b      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fc64 	bl	8000e98 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe fc60 	bl	8000e98 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e15b      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x200>
 80025f2:	e015      	b.n	8002620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc4d 	bl	8000e98 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fc49 	bl	8000e98 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e144      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a0 	beq.w	800276e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe fc0f 	bl	8000e98 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e011      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
 800268c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7fe fc02 	bl	8000e98 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0fd      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x4d4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
 80026b6:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a76      	ldr	r2, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a70      	ldr	r2, [pc, #448]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a6d      	ldr	r2, [pc, #436]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fbc7 	bl	8000e98 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fbc3 	bl	8000e98 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0bc      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x33a>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fbb1 	bl	8000e98 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fbad 	bl	8000e98 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0a6      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b52      	ldr	r3, [pc, #328]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8092 	beq.w	800289c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002778:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d05c      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d141      	bne.n	8002810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fb81 	bl	8000e98 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fb7d 	bl	8000e98 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e078      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	4933      	ldr	r1, [pc, #204]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e2:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb56 	bl	8000e98 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fb52 	bl	8000e98 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04d      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 800280e:	e045      	b.n	800289c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fb3f 	bl	8000e98 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fb3b 	bl	8000e98 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e036      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x44a>
 800283c:	e02e      	b.n	800289c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e029      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_RCC_OscConfig+0x4d8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	429a      	cmp	r2, r3
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d115      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d10d      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40007000 	.word	0x40007000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470060 	.word	0x42470060

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cc      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d044      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e067      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe fa78 	bl	8000e98 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe fa74 	bl	8000e98 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20c      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f9d8 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08007070 	.word	0x08007070
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a96:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x32>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x38>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80b4 	bne.w	8002c14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aae:	60bb      	str	r3, [r7, #8]
       break;
 8002ab0:	e0b3      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ab4:	60bb      	str	r3, [r7, #8]
      break;
 8002ab6:	e0b0      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b5a      	ldr	r3, [pc, #360]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04a      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	f04f 0400 	mov.w	r4, #0
 8002ad8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	ea03 0501 	and.w	r5, r3, r1
 8002ae4:	ea04 0602 	and.w	r6, r4, r2
 8002ae8:	4629      	mov	r1, r5
 8002aea:	4632      	mov	r2, r6
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	0154      	lsls	r4, r2, #5
 8002af6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002afa:	014b      	lsls	r3, r1, #5
 8002afc:	4619      	mov	r1, r3
 8002afe:	4622      	mov	r2, r4
 8002b00:	1b49      	subs	r1, r1, r5
 8002b02:	eb62 0206 	sbc.w	r2, r2, r6
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	0194      	lsls	r4, r2, #6
 8002b10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b14:	018b      	lsls	r3, r1, #6
 8002b16:	1a5b      	subs	r3, r3, r1
 8002b18:	eb64 0402 	sbc.w	r4, r4, r2
 8002b1c:	f04f 0100 	mov.w	r1, #0
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	00e2      	lsls	r2, r4, #3
 8002b26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b2a:	00d9      	lsls	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	195b      	adds	r3, r3, r5
 8002b32:	eb44 0406 	adc.w	r4, r4, r6
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	0262      	lsls	r2, r4, #9
 8002b40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b44:	0259      	lsls	r1, r3, #9
 8002b46:	460b      	mov	r3, r1
 8002b48:	4614      	mov	r4, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	f7fd ffb8 	bl	8000acc <__aeabi_uldivmod>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e049      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	ea03 0501 	and.w	r5, r3, r1
 8002b7a:	ea04 0602 	and.w	r6, r4, r2
 8002b7e:	4629      	mov	r1, r5
 8002b80:	4632      	mov	r2, r6
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f04f 0400 	mov.w	r4, #0
 8002b8a:	0154      	lsls	r4, r2, #5
 8002b8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b90:	014b      	lsls	r3, r1, #5
 8002b92:	4619      	mov	r1, r3
 8002b94:	4622      	mov	r2, r4
 8002b96:	1b49      	subs	r1, r1, r5
 8002b98:	eb62 0206 	sbc.w	r2, r2, r6
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f04f 0400 	mov.w	r4, #0
 8002ba4:	0194      	lsls	r4, r2, #6
 8002ba6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	1a5b      	subs	r3, r3, r1
 8002bae:	eb64 0402 	sbc.w	r4, r4, r2
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	00e2      	lsls	r2, r4, #3
 8002bbc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bc0:	00d9      	lsls	r1, r3, #3
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	195b      	adds	r3, r3, r5
 8002bc8:	eb44 0406 	adc.w	r4, r4, r6
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	02a2      	lsls	r2, r4, #10
 8002bd6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bda:	0299      	lsls	r1, r3, #10
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4614      	mov	r4, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	4621      	mov	r1, r4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4623      	mov	r3, r4
 8002bee:	f7fd ff6d 	bl	8000acc <__aeabi_uldivmod>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	3301      	adds	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	60bb      	str	r3, [r7, #8]
      break;
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c16:	60bb      	str	r3, [r7, #8]
      break;
 8002c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4601      	mov	r1, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08007080 	.word	0x08007080

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c74:	f7ff ffdc 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0b5b      	lsrs	r3, r3, #13
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08007080 	.word	0x08007080

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d038      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe f8e7 	bl	8000e98 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cce:	f7fe f8e3 	bl	8000e98 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e0bd      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	495a      	ldr	r1, [pc, #360]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe f8c4 	bl	8000e98 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d14:	f7fe f8c0 	bl	8000e98 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e09a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d26:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8083 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d5c:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a42      	ldr	r2, [pc, #264]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d68:	f7fe f896 	bl	8000e98 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe f892 	bl	8000e98 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e06c      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02f      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d028      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d114      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f860 	bl	8000e98 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe f85c 	bl	8000e98 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e034      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	4911      	ldr	r1, [pc, #68]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e32:	6093      	str	r3, [r2, #8]
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7d1a      	ldrb	r2, [r3, #20]
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e58:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	42470068 	.word	0x42470068
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42470e40 	.word	0x42470e40
 8002e74:	424711e0 	.word	0x424711e0

08002e78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e083      	b.n	8002f92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7f5b      	ldrb	r3, [r3, #29]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f002 fd92 	bl	80059c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22ca      	movs	r2, #202	; 0xca
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2253      	movs	r2, #83	; 0x53
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9fb 	bl	80032b2 <RTC_EnterInitMode>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e05e      	b.n	8002f92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f98d 	bl	8003262 <HAL_RTC_WaitForSynchro>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e018      	b.n	8002f92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f9a:	b590      	push	{r4, r7, lr}
 8002f9c:	b087      	sub	sp, #28
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	7f1b      	ldrb	r3, [r3, #28]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RTC_SetTime+0x1c>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0aa      	b.n	800310c <HAL_RTC_SetTime+0x172>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d126      	bne.n	8003016 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f992 	bl	800330a <RTC_ByteToBcd2>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f98b 	bl	800330a <RTC_ByteToBcd2>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ff8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f983 	bl	800330a <RTC_ByteToBcd2>
 8003004:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003006:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	78db      	ldrb	r3, [r3, #3]
 800300e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e018      	b.n	8003048 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003036:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800303c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	78db      	ldrb	r3, [r3, #3]
 8003042:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	22ca      	movs	r2, #202	; 0xca
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2253      	movs	r2, #83	; 0x53
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f92a 	bl	80032b2 <RTC_EnterInitMode>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2204      	movs	r2, #4
 8003070:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e047      	b.n	800310c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003086:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800308a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800309a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d111      	bne.n	80030f6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8c5 	bl	8003262 <HAL_RTC_WaitForSynchro>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2204      	movs	r2, #4
 80030ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00a      	b.n	800310c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	22ff      	movs	r2, #255	; 0xff
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800310a:	2300      	movs	r3, #0
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_RTC_SetDate+0x1c>
 800312c:	2302      	movs	r3, #2
 800312e:	e094      	b.n	800325a <HAL_RTC_SetDate+0x146>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2202      	movs	r2, #2
 800313a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <HAL_RTC_SetDate+0x4c>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	b2db      	uxtb	r3, r3
 8003158:	330a      	adds	r3, #10
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11c      	bne.n	80031a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f8cd 	bl	800330a <RTC_ByteToBcd2>
 8003170:	4603      	mov	r3, r0
 8003172:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f8c6 	bl	800330a <RTC_ByteToBcd2>
 800317e:	4603      	mov	r3, r0
 8003180:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003182:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	789b      	ldrb	r3, [r3, #2]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f8be 	bl	800330a <RTC_ByteToBcd2>
 800318e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003190:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00e      	b.n	80031be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80031b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ca      	movs	r2, #202	; 0xca
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2253      	movs	r2, #83	; 0x53
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f86f 	bl	80032b2 <RTC_EnterInitMode>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	22ff      	movs	r2, #255	; 0xff
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2204      	movs	r2, #4
 80031e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e033      	b.n	800325a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003210:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f81e 	bl	8003262 <HAL_RTC_WaitForSynchro>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2204      	movs	r2, #4
 8003238:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00a      	b.n	800325a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}

08003262 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800327c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800327e:	f7fd fe0b 	bl	8000e98 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003284:	e009      	b.n	800329a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003286:	f7fd fe07 	bl	8000e98 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003294:	d901      	bls.n	800329a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e007      	b.n	80032aa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ee      	beq.n	8003286 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d119      	bne.n	8003300 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295
 80032d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032d6:	f7fd fddf 	bl	8000e98 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032dc:	e009      	b.n	80032f2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032de:	f7fd fddb 	bl	8000e98 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ec:	d901      	bls.n	80032f2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e007      	b.n	8003302 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003318:	e005      	b.n	8003326 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	3b0a      	subs	r3, #10
 8003324:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d8f6      	bhi.n	800331a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	b2da      	uxtb	r2, r3
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4313      	orrs	r3, r2
 8003338:	b2db      	uxtb	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e01d      	b.n	8003394 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f002 fb3f 	bl	80059f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f000 f8e5 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d007      	beq.n	80033ce <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_TIM_ConfigClockSource+0x18>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e0a6      	b.n	800354a <HAL_TIM_ConfigClockSource+0x166>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800341a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003422:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d067      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x120>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d80b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x6c>
 8003438:	2b10      	cmp	r3, #16
 800343a:	d073      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x140>
 800343c:	2b10      	cmp	r3, #16
 800343e:	d802      	bhi.n	8003446 <HAL_TIM_ConfigClockSource+0x62>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d06f      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003444:	e078      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003446:	2b20      	cmp	r3, #32
 8003448:	d06c      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x140>
 800344a:	2b30      	cmp	r3, #48	; 0x30
 800344c:	d06a      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800344e:	e073      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003450:	2b70      	cmp	r3, #112	; 0x70
 8003452:	d00d      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0x8c>
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d804      	bhi.n	8003462 <HAL_TIM_ConfigClockSource+0x7e>
 8003458:	2b50      	cmp	r3, #80	; 0x50
 800345a:	d033      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0xe0>
 800345c:	2b60      	cmp	r3, #96	; 0x60
 800345e:	d041      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003460:	e06a      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d066      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x152>
 8003468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346c:	d017      	beq.n	800349e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800346e:	e063      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f000 f962 	bl	8003748 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003492:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
      break;
 800349c:	e04c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f000 f94b 	bl	8003748 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c0:	609a      	str	r2, [r3, #8]
      break;
 80034c2:	e039      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f000 f8bf 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2150      	movs	r1, #80	; 0x50
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f918 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 80034e2:	e029      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f000 f8de 	bl	80036b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2160      	movs	r1, #96	; 0x60
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f908 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 8003502:	e019      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	461a      	mov	r2, r3
 8003512:	f000 f89f 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2140      	movs	r1, #64	; 0x40
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f8f8 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 8003522:	e009      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 f8ef 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 8003534:	e000      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a34      	ldr	r2, [pc, #208]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a31      	ldr	r2, [pc, #196]	; (800363c <TIM_Base_SetConfig+0xe8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a30      	ldr	r2, [pc, #192]	; (8003640 <TIM_Base_SetConfig+0xec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0xf0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01b      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d017      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <TIM_Base_SetConfig+0xe8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <TIM_Base_SetConfig+0xec>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a20      	ldr	r2, [pc, #128]	; (8003644 <TIM_Base_SetConfig+0xf0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <TIM_Base_SetConfig+0xf4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <TIM_Base_SetConfig+0xf8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <TIM_Base_SetConfig+0xfc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800

08003654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 030a 	bic.w	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	031b      	lsls	r3, r3, #12
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	f043 0307 	orr.w	r3, r3, #7
 8003734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	431a      	orrs	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e050      	b.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d013      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10c      	bne.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4313      	orrs	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40014000 	.word	0x40014000

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e03f      	b.n	80038f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f002 f8d2 	bl	8005a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fb97 	bl	8003fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af02      	add	r7, sp, #8
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 8083 	bne.w	8003a26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x2e>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07b      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x40>
 800393a:	2302      	movs	r3, #2
 800393c:	e074      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003954:	f7fd faa0 	bl	8000e98 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800396e:	e042      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d122      	bne.n	80039ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f9b6 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e042      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3302      	adds	r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e017      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	e013      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f993 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e01f      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	60ba      	str	r2, [r7, #8]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1b7      	bne.n	8003970 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f97a 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d140      	bne.n	8003acc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Receive_IT+0x26>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e039      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Receive_IT+0x38>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e032      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2222      	movs	r2, #34	; 0x22
 8003a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_UART_IRQHandler+0x52>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9d6 	bl	8003ed8 <UART_Receive_IT>
      return;
 8003b2c:	e0d1      	b.n	8003cd2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80b0 	beq.w	8003c96 <HAL_UART_IRQHandler+0x1ba>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_UART_IRQHandler+0x70>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a5 	beq.w	8003c96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_UART_IRQHandler+0x90>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_UART_IRQHandler+0xb0>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0202 	orr.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_UART_IRQHandler+0xd0>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00f      	beq.n	8003bd6 <HAL_UART_IRQHandler+0xfa>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <HAL_UART_IRQHandler+0xee>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	f043 0208 	orr.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d078      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x11c>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f970 	bl	8003ed8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_UART_IRQHandler+0x144>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8b9 	bl	8003d98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d123      	bne.n	8003c7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_UART_IRQHandler+0x1fc>)
 8003c52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd fa5c 	bl	8001116 <HAL_DMA_Abort_IT>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c72:	e00e      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f83b 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7a:	e00a      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f837 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c82:	e006      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f833 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c90:	e01e      	b.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c92:	bf00      	nop
    return;
 8003c94:	e01c      	b.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1d6>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8a6 	bl	8003dfc <UART_Transmit_IT>
    return;
 8003cb0:	e00f      	b.n	8003cd2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x1f6>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8ee 	bl	8003ea8 <UART_EndTransmit_IT>
    return;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003cd0:	bf00      	nop
  }
}
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08003dd5 	.word	0x08003dd5

08003cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e02c      	b.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d028      	beq.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	f7fd f8b8 	bl	8000e98 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d21d      	bcs.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e00f      	b.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d0c3      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff ff7e 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b21      	cmp	r3, #33	; 0x21
 8003e0e:	d144      	bne.n	8003e9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d11a      	bne.n	8003e50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]
 8003e42:	e00e      	b.n	8003e62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]
 8003e4e:	e008      	b.n	8003e62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	1c59      	adds	r1, r3, #1
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6211      	str	r1, [r2, #32]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ff07 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b22      	cmp	r3, #34	; 0x22
 8003eea:	d171      	bne.n	8003fd0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d123      	bne.n	8003f3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10e      	bne.n	8003f22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f20:	e029      	b.n	8003f76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f3c:	e01b      	b.n	8003f76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	1c59      	adds	r1, r3, #1
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6291      	str	r1, [r2, #40]	; 0x28
 8003f56:	b2c2      	uxtb	r2, r0
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e00c      	b.n	8003f76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	1c58      	adds	r0, r3, #1
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	6288      	str	r0, [r1, #40]	; 0x28
 8003f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4619      	mov	r1, r3
 8003f84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d120      	bne.n	8003fcc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0220 	bic.w	r2, r2, #32
 8003f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 fc30 	bl	8005828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e002      	b.n	8003fd2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800401e:	f023 030c 	bic.w	r3, r3, #12
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	430b      	orrs	r3, r1
 800402a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	f040 818b 	bne.w	8004364 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4ac1      	ldr	r2, [pc, #772]	; (8004358 <UART_SetConfig+0x37c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d005      	beq.n	8004064 <UART_SetConfig+0x88>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4abf      	ldr	r2, [pc, #764]	; (800435c <UART_SetConfig+0x380>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f040 80bd 	bne.w	80041de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe fe04 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004068:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	461d      	mov	r5, r3
 800406e:	f04f 0600 	mov.w	r6, #0
 8004072:	46a8      	mov	r8, r5
 8004074:	46b1      	mov	r9, r6
 8004076:	eb18 0308 	adds.w	r3, r8, r8
 800407a:	eb49 0409 	adc.w	r4, r9, r9
 800407e:	4698      	mov	r8, r3
 8004080:	46a1      	mov	r9, r4
 8004082:	eb18 0805 	adds.w	r8, r8, r5
 8004086:	eb49 0906 	adc.w	r9, r9, r6
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004096:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800409a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800409e:	4688      	mov	r8, r1
 80040a0:	4691      	mov	r9, r2
 80040a2:	eb18 0005 	adds.w	r0, r8, r5
 80040a6:	eb49 0106 	adc.w	r1, r9, r6
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	461d      	mov	r5, r3
 80040b0:	f04f 0600 	mov.w	r6, #0
 80040b4:	196b      	adds	r3, r5, r5
 80040b6:	eb46 0406 	adc.w	r4, r6, r6
 80040ba:	461a      	mov	r2, r3
 80040bc:	4623      	mov	r3, r4
 80040be:	f7fc fd05 	bl	8000acc <__aeabi_uldivmod>
 80040c2:	4603      	mov	r3, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	461a      	mov	r2, r3
 80040c8:	4ba5      	ldr	r3, [pc, #660]	; (8004360 <UART_SetConfig+0x384>)
 80040ca:	fba3 2302 	umull	r2, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	461d      	mov	r5, r3
 80040d8:	f04f 0600 	mov.w	r6, #0
 80040dc:	46a9      	mov	r9, r5
 80040de:	46b2      	mov	sl, r6
 80040e0:	eb19 0309 	adds.w	r3, r9, r9
 80040e4:	eb4a 040a 	adc.w	r4, sl, sl
 80040e8:	4699      	mov	r9, r3
 80040ea:	46a2      	mov	sl, r4
 80040ec:	eb19 0905 	adds.w	r9, r9, r5
 80040f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004108:	4689      	mov	r9, r1
 800410a:	4692      	mov	sl, r2
 800410c:	eb19 0005 	adds.w	r0, r9, r5
 8004110:	eb4a 0106 	adc.w	r1, sl, r6
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	461d      	mov	r5, r3
 800411a:	f04f 0600 	mov.w	r6, #0
 800411e:	196b      	adds	r3, r5, r5
 8004120:	eb46 0406 	adc.w	r4, r6, r6
 8004124:	461a      	mov	r2, r3
 8004126:	4623      	mov	r3, r4
 8004128:	f7fc fcd0 	bl	8000acc <__aeabi_uldivmod>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	461a      	mov	r2, r3
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <UART_SetConfig+0x384>)
 8004134:	fba3 1302 	umull	r1, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	2164      	movs	r1, #100	; 0x64
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	3332      	adds	r3, #50	; 0x32
 8004146:	4a86      	ldr	r2, [pc, #536]	; (8004360 <UART_SetConfig+0x384>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004154:	4498      	add	r8, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	461d      	mov	r5, r3
 800415a:	f04f 0600 	mov.w	r6, #0
 800415e:	46a9      	mov	r9, r5
 8004160:	46b2      	mov	sl, r6
 8004162:	eb19 0309 	adds.w	r3, r9, r9
 8004166:	eb4a 040a 	adc.w	r4, sl, sl
 800416a:	4699      	mov	r9, r3
 800416c:	46a2      	mov	sl, r4
 800416e:	eb19 0905 	adds.w	r9, r9, r5
 8004172:	eb4a 0a06 	adc.w	sl, sl, r6
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004182:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004186:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800418a:	4689      	mov	r9, r1
 800418c:	4692      	mov	sl, r2
 800418e:	eb19 0005 	adds.w	r0, r9, r5
 8004192:	eb4a 0106 	adc.w	r1, sl, r6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	461d      	mov	r5, r3
 800419c:	f04f 0600 	mov.w	r6, #0
 80041a0:	196b      	adds	r3, r5, r5
 80041a2:	eb46 0406 	adc.w	r4, r6, r6
 80041a6:	461a      	mov	r2, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	f7fc fc8f 	bl	8000acc <__aeabi_uldivmod>
 80041ae:	4603      	mov	r3, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <UART_SetConfig+0x384>)
 80041b6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2164      	movs	r1, #100	; 0x64
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3332      	adds	r3, #50	; 0x32
 80041c8:	4a65      	ldr	r2, [pc, #404]	; (8004360 <UART_SetConfig+0x384>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 0207 	and.w	r2, r3, #7
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4442      	add	r2, r8
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	e26f      	b.n	80046be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041de:	f7fe fd33 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 80041e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	461d      	mov	r5, r3
 80041e8:	f04f 0600 	mov.w	r6, #0
 80041ec:	46a8      	mov	r8, r5
 80041ee:	46b1      	mov	r9, r6
 80041f0:	eb18 0308 	adds.w	r3, r8, r8
 80041f4:	eb49 0409 	adc.w	r4, r9, r9
 80041f8:	4698      	mov	r8, r3
 80041fa:	46a1      	mov	r9, r4
 80041fc:	eb18 0805 	adds.w	r8, r8, r5
 8004200:	eb49 0906 	adc.w	r9, r9, r6
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004210:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004214:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004218:	4688      	mov	r8, r1
 800421a:	4691      	mov	r9, r2
 800421c:	eb18 0005 	adds.w	r0, r8, r5
 8004220:	eb49 0106 	adc.w	r1, r9, r6
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	461d      	mov	r5, r3
 800422a:	f04f 0600 	mov.w	r6, #0
 800422e:	196b      	adds	r3, r5, r5
 8004230:	eb46 0406 	adc.w	r4, r6, r6
 8004234:	461a      	mov	r2, r3
 8004236:	4623      	mov	r3, r4
 8004238:	f7fc fc48 	bl	8000acc <__aeabi_uldivmod>
 800423c:	4603      	mov	r3, r0
 800423e:	460c      	mov	r4, r1
 8004240:	461a      	mov	r2, r3
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <UART_SetConfig+0x384>)
 8004244:	fba3 2302 	umull	r2, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	461d      	mov	r5, r3
 8004252:	f04f 0600 	mov.w	r6, #0
 8004256:	46a9      	mov	r9, r5
 8004258:	46b2      	mov	sl, r6
 800425a:	eb19 0309 	adds.w	r3, r9, r9
 800425e:	eb4a 040a 	adc.w	r4, sl, sl
 8004262:	4699      	mov	r9, r3
 8004264:	46a2      	mov	sl, r4
 8004266:	eb19 0905 	adds.w	r9, r9, r5
 800426a:	eb4a 0a06 	adc.w	sl, sl, r6
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800427a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800427e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004282:	4689      	mov	r9, r1
 8004284:	4692      	mov	sl, r2
 8004286:	eb19 0005 	adds.w	r0, r9, r5
 800428a:	eb4a 0106 	adc.w	r1, sl, r6
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	461d      	mov	r5, r3
 8004294:	f04f 0600 	mov.w	r6, #0
 8004298:	196b      	adds	r3, r5, r5
 800429a:	eb46 0406 	adc.w	r4, r6, r6
 800429e:	461a      	mov	r2, r3
 80042a0:	4623      	mov	r3, r4
 80042a2:	f7fc fc13 	bl	8000acc <__aeabi_uldivmod>
 80042a6:	4603      	mov	r3, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <UART_SetConfig+0x384>)
 80042ae:	fba3 1302 	umull	r1, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2164      	movs	r1, #100	; 0x64
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <UART_SetConfig+0x384>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ce:	4498      	add	r8, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	461d      	mov	r5, r3
 80042d4:	f04f 0600 	mov.w	r6, #0
 80042d8:	46a9      	mov	r9, r5
 80042da:	46b2      	mov	sl, r6
 80042dc:	eb19 0309 	adds.w	r3, r9, r9
 80042e0:	eb4a 040a 	adc.w	r4, sl, sl
 80042e4:	4699      	mov	r9, r3
 80042e6:	46a2      	mov	sl, r4
 80042e8:	eb19 0905 	adds.w	r9, r9, r5
 80042ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004304:	4689      	mov	r9, r1
 8004306:	4692      	mov	sl, r2
 8004308:	eb19 0005 	adds.w	r0, r9, r5
 800430c:	eb4a 0106 	adc.w	r1, sl, r6
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	461d      	mov	r5, r3
 8004316:	f04f 0600 	mov.w	r6, #0
 800431a:	196b      	adds	r3, r5, r5
 800431c:	eb46 0406 	adc.w	r4, r6, r6
 8004320:	461a      	mov	r2, r3
 8004322:	4623      	mov	r3, r4
 8004324:	f7fc fbd2 	bl	8000acc <__aeabi_uldivmod>
 8004328:	4603      	mov	r3, r0
 800432a:	460c      	mov	r4, r1
 800432c:	461a      	mov	r2, r3
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <UART_SetConfig+0x384>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <UART_SetConfig+0x384>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4442      	add	r2, r8
 8004354:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004356:	e1b2      	b.n	80046be <UART_SetConfig+0x6e2>
 8004358:	40011000 	.word	0x40011000
 800435c:	40011400 	.word	0x40011400
 8004360:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4ad7      	ldr	r2, [pc, #860]	; (80046c8 <UART_SetConfig+0x6ec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d005      	beq.n	800437a <UART_SetConfig+0x39e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4ad6      	ldr	r2, [pc, #856]	; (80046cc <UART_SetConfig+0x6f0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f040 80d1 	bne.w	800451c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800437a:	f7fe fc79 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 800437e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	469a      	mov	sl, r3
 8004384:	f04f 0b00 	mov.w	fp, #0
 8004388:	46d0      	mov	r8, sl
 800438a:	46d9      	mov	r9, fp
 800438c:	eb18 0308 	adds.w	r3, r8, r8
 8004390:	eb49 0409 	adc.w	r4, r9, r9
 8004394:	4698      	mov	r8, r3
 8004396:	46a1      	mov	r9, r4
 8004398:	eb18 080a 	adds.w	r8, r8, sl
 800439c:	eb49 090b 	adc.w	r9, r9, fp
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043b4:	4688      	mov	r8, r1
 80043b6:	4691      	mov	r9, r2
 80043b8:	eb1a 0508 	adds.w	r5, sl, r8
 80043bc:	eb4b 0609 	adc.w	r6, fp, r9
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	0094      	lsls	r4, r2, #2
 80043d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	461a      	mov	r2, r3
 80043dc:	4623      	mov	r3, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	4631      	mov	r1, r6
 80043e2:	f7fc fb73 	bl	8000acc <__aeabi_uldivmod>
 80043e6:	4603      	mov	r3, r0
 80043e8:	460c      	mov	r4, r1
 80043ea:	461a      	mov	r2, r3
 80043ec:	4bb8      	ldr	r3, [pc, #736]	; (80046d0 <UART_SetConfig+0x6f4>)
 80043ee:	fba3 2302 	umull	r2, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	469b      	mov	fp, r3
 80043fc:	f04f 0c00 	mov.w	ip, #0
 8004400:	46d9      	mov	r9, fp
 8004402:	46e2      	mov	sl, ip
 8004404:	eb19 0309 	adds.w	r3, r9, r9
 8004408:	eb4a 040a 	adc.w	r4, sl, sl
 800440c:	4699      	mov	r9, r3
 800440e:	46a2      	mov	sl, r4
 8004410:	eb19 090b 	adds.w	r9, r9, fp
 8004414:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004424:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004428:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800442c:	4689      	mov	r9, r1
 800442e:	4692      	mov	sl, r2
 8004430:	eb1b 0509 	adds.w	r5, fp, r9
 8004434:	eb4c 060a 	adc.w	r6, ip, sl
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	f04f 0400 	mov.w	r4, #0
 800444a:	0094      	lsls	r4, r2, #2
 800444c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004450:	008b      	lsls	r3, r1, #2
 8004452:	461a      	mov	r2, r3
 8004454:	4623      	mov	r3, r4
 8004456:	4628      	mov	r0, r5
 8004458:	4631      	mov	r1, r6
 800445a:	f7fc fb37 	bl	8000acc <__aeabi_uldivmod>
 800445e:	4603      	mov	r3, r0
 8004460:	460c      	mov	r4, r1
 8004462:	461a      	mov	r2, r3
 8004464:	4b9a      	ldr	r3, [pc, #616]	; (80046d0 <UART_SetConfig+0x6f4>)
 8004466:	fba3 1302 	umull	r1, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2164      	movs	r1, #100	; 0x64
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	3332      	adds	r3, #50	; 0x32
 8004478:	4a95      	ldr	r2, [pc, #596]	; (80046d0 <UART_SetConfig+0x6f4>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004484:	4498      	add	r8, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	469b      	mov	fp, r3
 800448a:	f04f 0c00 	mov.w	ip, #0
 800448e:	46d9      	mov	r9, fp
 8004490:	46e2      	mov	sl, ip
 8004492:	eb19 0309 	adds.w	r3, r9, r9
 8004496:	eb4a 040a 	adc.w	r4, sl, sl
 800449a:	4699      	mov	r9, r3
 800449c:	46a2      	mov	sl, r4
 800449e:	eb19 090b 	adds.w	r9, r9, fp
 80044a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ba:	4689      	mov	r9, r1
 80044bc:	4692      	mov	sl, r2
 80044be:	eb1b 0509 	adds.w	r5, fp, r9
 80044c2:	eb4c 060a 	adc.w	r6, ip, sl
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4619      	mov	r1, r3
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f04f 0400 	mov.w	r4, #0
 80044d8:	0094      	lsls	r4, r2, #2
 80044da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	461a      	mov	r2, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	4631      	mov	r1, r6
 80044e8:	f7fc faf0 	bl	8000acc <__aeabi_uldivmod>
 80044ec:	4603      	mov	r3, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b77      	ldr	r3, [pc, #476]	; (80046d0 <UART_SetConfig+0x6f4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	; 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	3332      	adds	r3, #50	; 0x32
 8004506:	4a72      	ldr	r2, [pc, #456]	; (80046d0 <UART_SetConfig+0x6f4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4442      	add	r2, r8
 8004518:	609a      	str	r2, [r3, #8]
 800451a:	e0d0      	b.n	80046be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fb94 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8004520:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	469a      	mov	sl, r3
 8004526:	f04f 0b00 	mov.w	fp, #0
 800452a:	46d0      	mov	r8, sl
 800452c:	46d9      	mov	r9, fp
 800452e:	eb18 0308 	adds.w	r3, r8, r8
 8004532:	eb49 0409 	adc.w	r4, r9, r9
 8004536:	4698      	mov	r8, r3
 8004538:	46a1      	mov	r9, r4
 800453a:	eb18 080a 	adds.w	r8, r8, sl
 800453e:	eb49 090b 	adc.w	r9, r9, fp
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800454e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004552:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004556:	4688      	mov	r8, r1
 8004558:	4691      	mov	r9, r2
 800455a:	eb1a 0508 	adds.w	r5, sl, r8
 800455e:	eb4b 0609 	adc.w	r6, fp, r9
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4619      	mov	r1, r3
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	f04f 0400 	mov.w	r4, #0
 8004574:	0094      	lsls	r4, r2, #2
 8004576:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800457a:	008b      	lsls	r3, r1, #2
 800457c:	461a      	mov	r2, r3
 800457e:	4623      	mov	r3, r4
 8004580:	4628      	mov	r0, r5
 8004582:	4631      	mov	r1, r6
 8004584:	f7fc faa2 	bl	8000acc <__aeabi_uldivmod>
 8004588:	4603      	mov	r3, r0
 800458a:	460c      	mov	r4, r1
 800458c:	461a      	mov	r2, r3
 800458e:	4b50      	ldr	r3, [pc, #320]	; (80046d0 <UART_SetConfig+0x6f4>)
 8004590:	fba3 2302 	umull	r2, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	469b      	mov	fp, r3
 800459e:	f04f 0c00 	mov.w	ip, #0
 80045a2:	46d9      	mov	r9, fp
 80045a4:	46e2      	mov	sl, ip
 80045a6:	eb19 0309 	adds.w	r3, r9, r9
 80045aa:	eb4a 040a 	adc.w	r4, sl, sl
 80045ae:	4699      	mov	r9, r3
 80045b0:	46a2      	mov	sl, r4
 80045b2:	eb19 090b 	adds.w	r9, r9, fp
 80045b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ce:	4689      	mov	r9, r1
 80045d0:	4692      	mov	sl, r2
 80045d2:	eb1b 0509 	adds.w	r5, fp, r9
 80045d6:	eb4c 060a 	adc.w	r6, ip, sl
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4619      	mov	r1, r3
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f04f 0400 	mov.w	r4, #0
 80045ec:	0094      	lsls	r4, r2, #2
 80045ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4623      	mov	r3, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	4631      	mov	r1, r6
 80045fc:	f7fc fa66 	bl	8000acc <__aeabi_uldivmod>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	461a      	mov	r2, r3
 8004606:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <UART_SetConfig+0x6f4>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <UART_SetConfig+0x6f4>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004626:	4498      	add	r8, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	469b      	mov	fp, r3
 800462c:	f04f 0c00 	mov.w	ip, #0
 8004630:	46d9      	mov	r9, fp
 8004632:	46e2      	mov	sl, ip
 8004634:	eb19 0309 	adds.w	r3, r9, r9
 8004638:	eb4a 040a 	adc.w	r4, sl, sl
 800463c:	4699      	mov	r9, r3
 800463e:	46a2      	mov	sl, r4
 8004640:	eb19 090b 	adds.w	r9, r9, fp
 8004644:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800465c:	4689      	mov	r9, r1
 800465e:	4692      	mov	sl, r2
 8004660:	eb1b 0509 	adds.w	r5, fp, r9
 8004664:	eb4c 060a 	adc.w	r6, ip, sl
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4619      	mov	r1, r3
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	f04f 0400 	mov.w	r4, #0
 800467a:	0094      	lsls	r4, r2, #2
 800467c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	461a      	mov	r2, r3
 8004684:	4623      	mov	r3, r4
 8004686:	4628      	mov	r0, r5
 8004688:	4631      	mov	r1, r6
 800468a:	f7fc fa1f 	bl	8000acc <__aeabi_uldivmod>
 800468e:	4603      	mov	r3, r0
 8004690:	460c      	mov	r4, r1
 8004692:	461a      	mov	r2, r3
 8004694:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <UART_SetConfig+0x6f4>)
 8004696:	fba3 1302 	umull	r1, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2164      	movs	r1, #100	; 0x64
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	3332      	adds	r3, #50	; 0x32
 80046a8:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <UART_SetConfig+0x6f4>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	f003 020f 	and.w	r2, r3, #15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4442      	add	r2, r8
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	e7ff      	b.n	80046be <UART_SetConfig+0x6e2>
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c8:	40011000 	.word	0x40011000
 80046cc:	40011400 	.word	0x40011400
 80046d0:	51eb851f 	.word	0x51eb851f

080046d4 <gpio_set_input>:
/*void delay(uint16_t delay){
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
}*/
void gpio_set_input (GPIO_InitTypeDef GPIO_InitStruct)
{
 80046d4:	b084      	sub	sp, #16
 80046d6:	b580      	push	{r7, lr}
 80046d8:	af00      	add	r7, sp, #0
 80046da:	f107 0c08 	add.w	ip, r7, #8
 80046de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046e2:	2302      	movs	r3, #2
 80046e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ee:	f107 0108 	add.w	r1, r7, #8
 80046f2:	4804      	ldr	r0, [pc, #16]	; (8004704 <gpio_set_input+0x30>)
 80046f4:	f7fc fd32 	bl	800115c <HAL_GPIO_Init>
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004700:	b004      	add	sp, #16
 8004702:	4770      	bx	lr
 8004704:	40020000 	.word	0x40020000

08004708 <gpio_set_output>:


void gpio_set_output (GPIO_InitTypeDef GPIO_InitStruct)
{
 8004708:	b084      	sub	sp, #16
 800470a:	b580      	push	{r7, lr}
 800470c:	af00      	add	r7, sp, #0
 800470e:	f107 0c08 	add.w	ip, r7, #8
 8004712:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004716:	2302      	movs	r3, #2
 8004718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004722:	2302      	movs	r3, #2
 8004724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 0108 	add.w	r1, r7, #8
 800472a:	4804      	ldr	r0, [pc, #16]	; (800473c <gpio_set_output+0x34>)
 800472c:	f7fc fd16 	bl	800115c <HAL_GPIO_Init>
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004738:	b004      	add	sp, #16
 800473a:	4770      	bx	lr
 800473c:	40020000 	.word	0x40020000

08004740 <ds18b20_init>:

uint8_t ds18b20_init (GPIO_InitTypeDef GPIO_InitStruct)
{
 8004740:	b084      	sub	sp, #16
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af02      	add	r7, sp, #8
 8004748:	f107 0c08 	add.w	ip, r7, #8
 800474c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	gpio_set_output (GPIO_InitStruct);   // set the pin as output
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800475a:	f7ff ffd5 	bl	8004708 <gpio_set_output>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin low
 800475e:	2200      	movs	r2, #0
 8004760:	2102      	movs	r1, #2
 8004762:	4812      	ldr	r0, [pc, #72]	; (80047ac <ds18b20_init+0x6c>)
 8004764:	f7fc fe94 	bl	8001490 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8004768:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800476c:	f000 fc20 	bl	8004fb0 <delay>

	gpio_set_input (GPIO_InitStruct);    // set the pin as input
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477a:	f7ff ffab 	bl	80046d4 <gpio_set_input>
	delay (80);    // delay according to datasheet
 800477e:	2050      	movs	r0, #80	; 0x50
 8004780:	f000 fc16 	bl	8004fb0 <delay>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))    // if the pin is low i.e the presence pulse is there
 8004784:	2102      	movs	r1, #2
 8004786:	4809      	ldr	r0, [pc, #36]	; (80047ac <ds18b20_init+0x6c>)
 8004788:	f7fc fe6a 	bl	8001460 <HAL_GPIO_ReadPin>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <ds18b20_init+0x56>
	{
		return 0;
 8004792:	2300      	movs	r3, #0
 8004794:	e004      	b.n	80047a0 <ds18b20_init+0x60>
	}

	else
	{
		delay (400);
 8004796:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800479a:	f000 fc09 	bl	8004fb0 <delay>
		return 1;
 800479e:	2301      	movs	r3, #1
	}
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a8:	b004      	add	sp, #16
 80047aa:	4770      	bx	lr
 80047ac:	40020000 	.word	0x40020000

080047b0 <write>:

void write (uint8_t data,GPIO_InitTypeDef GPIO_InitStruct)
{
 80047b0:	b084      	sub	sp, #16
 80047b2:	b590      	push	{r4, r7, lr}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	4604      	mov	r4, r0
 80047ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80047c2:	4623      	mov	r3, r4
 80047c4:	71fb      	strb	r3, [r7, #7]
	gpio_set_output (GPIO_InitStruct);   // set as output
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047d0:	f7ff ff9a 	bl	8004708 <gpio_set_output>
	for (int i=0; i<8; i++)
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e03a      	b.n	8004850 <write+0xa0>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80047da:	79fa      	ldrb	r2, [r7, #7]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	fa42 f303 	asr.w	r3, r2, r3
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <write+0x6e>
		{
			// write 1

			gpio_set_output (GPIO_InitStruct);  // set as output
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047f4:	f7ff ff88 	bl	8004708 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 80047f8:	2200      	movs	r2, #0
 80047fa:	2102      	movs	r1, #2
 80047fc:	4819      	ldr	r0, [pc, #100]	; (8004864 <write+0xb4>)
 80047fe:	f7fc fe47 	bl	8001490 <HAL_GPIO_WritePin>
			delay (1);  // wait for  us
 8004802:	2001      	movs	r0, #1
 8004804:	f000 fbd4 	bl	8004fb0 <delay>

			gpio_set_input (GPIO_InitStruct);  // set as input
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004812:	f7ff ff5f 	bl	80046d4 <gpio_set_input>
			delay (60);  // wait for 60 us
 8004816:	203c      	movs	r0, #60	; 0x3c
 8004818:	f000 fbca 	bl	8004fb0 <delay>
 800481c:	e015      	b.n	800484a <write+0x9a>
		}
		else  // if the bit is low
		{
			// write 0
			gpio_set_output (GPIO_InitStruct);
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004828:	f7ff ff6e 	bl	8004708 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the pin LOW
 800482c:	2200      	movs	r2, #0
 800482e:	2102      	movs	r1, #2
 8004830:	480c      	ldr	r0, [pc, #48]	; (8004864 <write+0xb4>)
 8004832:	f7fc fe2d 	bl	8001490 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 8004836:	203c      	movs	r0, #60	; 0x3c
 8004838:	f000 fbba 	bl	8004fb0 <delay>

			gpio_set_input (GPIO_InitStruct);
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004846:	f7ff ff45 	bl	80046d4 <gpio_set_input>
	for (int i=0; i<8; i++)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b07      	cmp	r3, #7
 8004854:	ddc1      	ble.n	80047da <write+0x2a>
		}
	}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004860:	b004      	add	sp, #16
 8004862:	4770      	bx	lr
 8004864:	40020000 	.word	0x40020000

08004868 <read>:

uint8_t read (GPIO_InitTypeDef GPIO_InitStruct)
{
 8004868:	b084      	sub	sp, #16
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af02      	add	r7, sp, #8
 8004870:	f107 0c10 	add.w	ip, r7, #16
 8004874:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t value=0;
 8004878:	2300      	movs	r3, #0
 800487a:	71fb      	strb	r3, [r7, #7]
	gpio_set_input (GPIO_InitStruct);
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004886:	f7ff ff25 	bl	80046d4 <gpio_set_input>

	for (int i=0;i<8;i++)
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	e02c      	b.n	80048ea <read+0x82>
	{
		gpio_set_output (GPIO_InitStruct);   // set as output
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	f107 0310 	add.w	r3, r7, #16
 8004898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800489a:	f7ff ff35 	bl	8004708 <gpio_set_output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 800489e:	2200      	movs	r2, #0
 80048a0:	2102      	movs	r1, #2
 80048a2:	4817      	ldr	r0, [pc, #92]	; (8004900 <read+0x98>)
 80048a4:	f7fc fdf4 	bl	8001490 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 80048a8:	2002      	movs	r0, #2
 80048aa:	f000 fb81 	bl	8004fb0 <delay>

		gpio_set_input (GPIO_InitStruct);  // set as input
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	f107 0310 	add.w	r3, r7, #16
 80048b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048b8:	f7ff ff0c 	bl	80046d4 <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 80048bc:	2102      	movs	r1, #2
 80048be:	4810      	ldr	r0, [pc, #64]	; (8004900 <read+0x98>)
 80048c0:	f7fc fdce 	bl	8001460 <HAL_GPIO_ReadPin>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <read+0x76>
		{
			value |= 1<<i;  // read = 1
 80048ca:	2201      	movs	r2, #1
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	b25a      	sxtb	r2, r3
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	4313      	orrs	r3, r2
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 80048de:	203c      	movs	r0, #60	; 0x3c
 80048e0:	f000 fb66 	bl	8004fb0 <delay>
	for (int i=0;i<8;i++)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b07      	cmp	r3, #7
 80048ee:	ddcf      	ble.n	8004890 <read+0x28>
	}
	return value;
 80048f0:	79fb      	ldrb	r3, [r7, #7]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048fc:	b004      	add	sp, #16
 80048fe:	4770      	bx	lr
 8004900:	40020000 	.word	0x40020000

08004904 <runDS18B>:

void runDS18B(GPIO_InitTypeDef GPIO_InitStruct,UART_HandleTypeDef huart){
 8004904:	b084      	sub	sp, #16
 8004906:	b580      	push	{r7, lr}
 8004908:	b094      	sub	sp, #80	; 0x50
 800490a:	af04      	add	r7, sp, #16
 800490c:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8004910:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		 char ds18bval[50];//it is for temperature val
		 int lenOfds18=0;
 8004914:	2300      	movs	r3, #0
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
		 int i=0;
 8004918:	2300      	movs	r3, #0
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
		/*FOR DS18B TEMP SENSOR */
		 check = ds18b20_init (GPIO_InitStruct);
 800491c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004926:	f7ff ff0b 	bl	8004740 <ds18b20_init>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <runDS18B+0x178>)
 8004930:	701a      	strb	r2, [r3, #0]
		 HAL_Delay (1);
 8004932:	2001      	movs	r0, #1
 8004934:	f7fc fabc 	bl	8000eb0 <HAL_Delay>
		 write (0xCC,GPIO_InitStruct);  // skip ROM
 8004938:	466a      	mov	r2, sp
 800493a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800493e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004942:	e882 0003 	stmia.w	r2, {r0, r1}
 8004946:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800494a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494c:	20cc      	movs	r0, #204	; 0xcc
 800494e:	f7ff ff2f 	bl	80047b0 <write>
		 write (0x44,GPIO_InitStruct);  // convert t
 8004952:	466a      	mov	r2, sp
 8004954:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800495c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004966:	2044      	movs	r0, #68	; 0x44
 8004968:	f7ff ff22 	bl	80047b0 <write>
		 HAL_Delay (800);
 800496c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004970:	f7fc fa9e 	bl	8000eb0 <HAL_Delay>
		 ds18b20_init (GPIO_InitStruct);
 8004974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800497c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800497e:	f7ff fedf 	bl	8004740 <ds18b20_init>
	     HAL_Delay(1);
 8004982:	2001      	movs	r0, #1
 8004984:	f7fc fa94 	bl	8000eb0 <HAL_Delay>
		 write (0xCC,GPIO_InitStruct);  // skip ROM
 8004988:	466a      	mov	r2, sp
 800498a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800498e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004992:	e882 0003 	stmia.w	r2, {r0, r1}
 8004996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800499a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800499c:	20cc      	movs	r0, #204	; 0xcc
 800499e:	f7ff ff07 	bl	80047b0 <write>
		 write (0xBE,GPIO_InitStruct);  // Read Scratchpad
 80049a2:	466a      	mov	r2, sp
 80049a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80049b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b6:	20be      	movs	r0, #190	; 0xbe
 80049b8:	f7ff fefa 	bl	80047b0 <write>
		 temp_l = read(GPIO_InitStruct);
 80049bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049c6:	f7ff ff4f 	bl	8004868 <read>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <runDS18B+0x17c>)
 80049d0:	701a      	strb	r2, [r3, #0]
		 temp_h = read(GPIO_InitStruct);
 80049d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049dc:	f7ff ff44 	bl	8004868 <read>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <runDS18B+0x180>)
 80049e6:	701a      	strb	r2, [r3, #0]
		 temp = (temp_h<<8)|temp_l;
 80049e8:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <runDS18B+0x180>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	b21a      	sxth	r2, r3
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <runDS18B+0x17c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b21b      	sxth	r3, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <runDS18B+0x184>)
 80049fe:	801a      	strh	r2, [r3, #0]
		 temperature_for_ds18b = (float)temp/16;
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <runDS18B+0x184>)
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a0c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <runDS18B+0x188>)
 8004a16:	edc3 7a00 	vstr	s15, [r3]

		 /* FOR DS18B UART TRANSMIT*/
		 sprintf(ds18bval,"temp.val=%d%c%c%c%c",(int)temperature_for_ds18b , 0xFF, 0xFF, 0xFF,'\n');
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <runDS18B+0x188>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a24:	1d38      	adds	r0, r7, #4
 8004a26:	230a      	movs	r3, #10
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	23ff      	movs	r3, #255	; 0xff
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	23ff      	movs	r3, #255	; 0xff
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	23ff      	movs	r3, #255	; 0xff
 8004a34:	ee17 2a90 	vmov	r2, s15
 8004a38:	4915      	ldr	r1, [pc, #84]	; (8004a90 <runDS18B+0x18c>)
 8004a3a:	f001 f9dd 	bl	8005df8 <siprintf>
		 while(ds18bval[i]!='\n'){
 8004a3e:	e005      	b.n	8004a4c <runDS18B+0x148>
			 lenOfds18++;
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	3301      	adds	r3, #1
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
			 ++i;
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	3301      	adds	r3, #1
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
		 while(ds18bval[i]!='\n'){
 8004a4c:	1d3a      	adds	r2, r7, #4
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	4413      	add	r3, r2
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b0a      	cmp	r3, #10
 8004a56:	d1f3      	bne.n	8004a40 <runDS18B+0x13c>
		 }
		 i=0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
		 HAL_UART_Transmit(&huart,ds18bval,lenOfds18,100);
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	1d39      	adds	r1, r7, #4
 8004a62:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004a66:	2364      	movs	r3, #100	; 0x64
 8004a68:	f7fe ff49 	bl	80038fe <HAL_UART_Transmit>
}
 8004a6c:	bf00      	nop
 8004a6e:	3740      	adds	r7, #64	; 0x40
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a76:	b004      	add	sp, #16
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000021d 	.word	0x2000021d
 8004a80:	20000218 	.word	0x20000218
 8004a84:	2000021c 	.word	0x2000021c
 8004a88:	2000021a 	.word	0x2000021a
 8004a8c:	20000220 	.word	0x20000220
 8004a90:	08006fe8 	.word	0x08006fe8

08004a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a96:	b093      	sub	sp, #76	; 0x4c
 8004a98:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9a:	f7fc f997 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a9e:	f000 f845 	bl	8004b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aa2:	f000 fa1b 	bl	8004edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004aa6:	f000 f9c5 	bl	8004e34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004aaa:	f000 f8c1 	bl	8004c30 <MX_I2C1_Init>
  MX_RTC_Init();
 8004aae:	f000 f8ed 	bl	8004c8c <MX_RTC_Init>
  MX_TIM1_Init();
 8004ab2:	f000 f945 	bl	8004d40 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004ab6:	f000 f993 	bl	8004de0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004aba:	f000 f9e5 	bl	8004e88 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Micro Second Timer Start */
  HAL_TIM_Base_Start(&htim1);
 8004abe:	4816      	ldr	r0, [pc, #88]	; (8004b18 <main+0x84>)
 8004ac0:	f7fe fc6c 	bl	800339c <HAL_TIM_Base_Start>

  /*Press Sensor Initialize*/
  SetupBMP();
 8004ac4:	f000 fda2 	bl	800560c <SetupBMP>

  // Pulse sensor initialize with interrupt
  HAL_UART_Receive_IT(&huart6,tempData, 3);
 8004ac8:	2203      	movs	r2, #3
 8004aca:	4914      	ldr	r1, [pc, #80]	; (8004b1c <main+0x88>)
 8004acc:	4814      	ldr	r0, [pc, #80]	; (8004b20 <main+0x8c>)
 8004ace:	f7fe ffaf 	bl	8003a30 <HAL_UART_Receive_IT>

	 //run_pulseSensor();
	 //HAL_Delay(100);
	 /*FOR DS18B SENSOR */

	 runDS18B(GPIO_InitStruct,huart1);
 8004ad2:	4e14      	ldr	r6, [pc, #80]	; (8004b24 <main+0x90>)
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <main+0x94>)
 8004ad6:	ac01      	add	r4, sp, #4
 8004ad8:	461d      	mov	r5, r3
 8004ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004aee:	6933      	ldr	r3, [r6, #16]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004af6:	f7ff ff05 	bl	8004904 <runDS18B>
	 HAL_Delay(100);
 8004afa:	2064      	movs	r0, #100	; 0x64
 8004afc:	f7fc f9d8 	bl	8000eb0 <HAL_Delay>

	 /*FOR PRESS SENSOR */

	 ReadBMP180();//Read the data from BMP180 sensor
 8004b00:	f000 fbfe 	bl	8005300 <ReadBMP180>
	 HAL_Delay(100);
 8004b04:	2064      	movs	r0, #100	; 0x64
 8004b06:	f7fc f9d3 	bl	8000eb0 <HAL_Delay>

	 /*FOR DHT22 SENSOR */

	 runDHT22();
 8004b0a:	f000 fa69 	bl	8004fe0 <runDHT22>
	 HAL_Delay(100);
 8004b0e:	2064      	movs	r0, #100	; 0x64
 8004b10:	f7fc f9ce 	bl	8000eb0 <HAL_Delay>
	 runDS18B(GPIO_InitStruct,huart1);
 8004b14:	e7dd      	b.n	8004ad2 <main+0x3e>
 8004b16:	bf00      	nop
 8004b18:	20000360 	.word	0x20000360
 8004b1c:	20000428 	.word	0x20000428
 8004b20:	200003a4 	.word	0x200003a4
 8004b24:	20000344 	.word	0x20000344
 8004b28:	200002c8 	.word	0x200002c8

08004b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b09a      	sub	sp, #104	; 0x68
 8004b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b36:	2230      	movs	r2, #48	; 0x30
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f954 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b50:	f107 030c 	add.w	r3, r7, #12
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	611a      	str	r2, [r3, #16]
 8004b60:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <SystemClock_Config+0xfc>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <SystemClock_Config+0xfc>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <SystemClock_Config+0xfc>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <SystemClock_Config+0x100>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a29      	ldr	r2, [pc, #164]	; (8004c2c <SystemClock_Config+0x100>)
 8004b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <SystemClock_Config+0x100>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004b9a:	2309      	movs	r3, #9
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004bb6:	2364      	movs	r3, #100	; 0x64
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fc04 	bl	80023d4 <HAL_RCC_OscConfig>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004bd2:	f000 fe7f 	bl	80058d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bd6:	230f      	movs	r3, #15
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bde:	2300      	movs	r3, #0
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004be8:	2300      	movs	r3, #0
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fd fe5e 	bl	80028b4 <HAL_RCC_ClockConfig>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8004bfe:	f000 fe69 	bl	80058d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c02:	2302      	movs	r3, #2
 8004c04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c0a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe f841 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004c1c:	f000 fe5a 	bl	80058d4 <Error_Handler>
  }
}
 8004c20:	bf00      	nop
 8004c22:	3768      	adds	r7, #104	; 0x68
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000

08004c30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <MX_I2C1_Init+0x54>)
 8004c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c3c:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <MX_I2C1_Init+0x58>)
 8004c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c6c:	4804      	ldr	r0, [pc, #16]	; (8004c80 <MX_I2C1_Init+0x50>)
 8004c6e:	f7fc fc29 	bl	80014c4 <HAL_I2C_Init>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c78:	f000 fe2c 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000268 	.word	0x20000268
 8004c84:	40005400 	.word	0x40005400
 8004c88:	000186a0 	.word	0x000186a0

08004c8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <MX_RTC_Init+0xac>)
 8004ca6:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <MX_RTC_Init+0xb0>)
 8004ca8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cb2:	227f      	movs	r2, #127	; 0x7f
 8004cb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004cce:	481a      	ldr	r0, [pc, #104]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cd0:	f7fe f8d2 	bl	8002e78 <HAL_RTC_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004cda:	f000 fdfb 	bl	80058d4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x10;
 8004cde:	2310      	movs	r3, #16
 8004ce0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8004ce2:	2330      	movs	r3, #48	; 0x30
 8004ce4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480f      	ldr	r0, [pc, #60]	; (8004d38 <MX_RTC_Init+0xac>)
 8004cfa:	f7fe f94e 	bl	8002f9a <HAL_RTC_SetTime>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004d04:	f000 fde6 	bl	80058d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8004d0c:	2311      	movs	r3, #17
 8004d0e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x4;
 8004d10:	2304      	movs	r3, #4
 8004d12:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004d18:	463b      	mov	r3, r7
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4806      	ldr	r0, [pc, #24]	; (8004d38 <MX_RTC_Init+0xac>)
 8004d20:	f7fe f9f8 	bl	8003114 <HAL_RTC_SetDate>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004d2a:	f000 fdd3 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2000030c 	.word	0x2000030c
 8004d3c:	40002800 	.word	0x40002800

08004d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d54:	463b      	mov	r3, r7
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <MX_TIM1_Init+0x9c>)
 8004d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d64:	2263      	movs	r2, #99	; 0x63
 8004d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d88:	4813      	ldr	r0, [pc, #76]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004d8a:	f7fe fadc 	bl	8003346 <HAL_TIM_Base_Init>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004d94:	f000 fd9e 	bl	80058d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	4619      	mov	r1, r3
 8004da4:	480c      	ldr	r0, [pc, #48]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004da6:	f7fe fb1d 	bl	80033e4 <HAL_TIM_ConfigClockSource>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004db0:	f000 fd90 	bl	80058d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <MX_TIM1_Init+0x98>)
 8004dc2:	f7fe fce1 	bl	8003788 <HAL_TIMEx_MasterConfigSynchronization>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004dcc:	f000 fd82 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004dd0:	bf00      	nop
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000360 	.word	0x20000360
 8004ddc:	40010000 	.word	0x40010000

08004de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <MX_USART1_UART_Init+0x50>)
 8004de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004e06:	220c      	movs	r2, #12
 8004e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e16:	4805      	ldr	r0, [pc, #20]	; (8004e2c <MX_USART1_UART_Init+0x4c>)
 8004e18:	f7fe fd24 	bl	8003864 <HAL_UART_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e22:	f000 fd57 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200002c8 	.word	0x200002c8
 8004e30:	40011000 	.word	0x40011000

08004e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <MX_USART2_UART_Init+0x50>)
 8004e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e5a:	220c      	movs	r2, #12
 8004e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e6a:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_USART2_UART_Init+0x4c>)
 8004e6c:	f7fe fcfa 	bl	8003864 <HAL_UART_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e76:	f000 fd2d 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200003e4 	.word	0x200003e4
 8004e84:	40004400 	.word	0x40004400

08004e88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <MX_USART6_UART_Init+0x50>)
 8004e90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004e94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004e98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004eae:	220c      	movs	r2, #12
 8004eb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <MX_USART6_UART_Init+0x4c>)
 8004ec0:	f7fe fcd0 	bl	8003864 <HAL_UART_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004eca:	f000 fd03 	bl	80058d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200003a4 	.word	0x200003a4
 8004ed8:	40011400 	.word	0x40011400

08004edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	609a      	str	r2, [r3, #8]
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <MX_GPIO_Init+0xcc>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2102      	movs	r1, #2
 8004f66:	4811      	ldr	r0, [pc, #68]	; (8004fac <MX_GPIO_Init+0xd0>)
 8004f68:	f7fc fa92 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f70:	2301      	movs	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7c:	f107 0314 	add.w	r3, r7, #20
 8004f80:	4619      	mov	r1, r3
 8004f82:	480a      	ldr	r0, [pc, #40]	; (8004fac <MX_GPIO_Init+0xd0>)
 8004f84:	f7fc f8ea 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f88:	2310      	movs	r3, #16
 8004f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4804      	ldr	r0, [pc, #16]	; (8004fac <MX_GPIO_Init+0xd0>)
 8004f9c:	f7fc f8de 	bl	800115c <HAL_GPIO_Init>

}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40020000 	.word	0x40020000

08004fb0 <delay>:

/* USER CODE BEGIN 4 */
void delay(uint16_t delay){
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <delay+0x2c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8004fc2:	bf00      	nop
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <delay+0x2c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3f9      	bcc.n	8004fc4 <delay+0x14>
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	20000360 	.word	0x20000360

08004fe0 <runDHT22>:

void runDHT22(){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0a2      	sub	sp, #136	; 0x88
 8004fe4:	af04      	add	r7, sp, #16
		 int i=0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	677b      	str	r3, [r7, #116]	; 0x74
		 char dht22Temp[50],dht22humidity[50];//it is for temperature val
		 int lenOfdht22Temp=0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	673b      	str	r3, [r7, #112]	; 0x70
		 int lenOfdht22humidity=0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	66fb      	str	r3, [r7, #108]	; 0x6c

		 /*FOR DHT22 SENSOR */
		 DHT22_start ();
 8004ff2:	f000 fb95 	bl	8005720 <DHT22_start>
		 check_response ();
 8004ff6:	f000 fba7 	bl	8005748 <check_response>
		 Rh_byte1 = read_data_DHT22 ();
 8004ffa:	f000 fbcd 	bl	8005798 <read_data_DHT22>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	4b67      	ldr	r3, [pc, #412]	; (80051a0 <runDHT22+0x1c0>)
 8005004:	701a      	strb	r2, [r3, #0]
		 Rh_byte2 = read_data_DHT22 ();
 8005006:	f000 fbc7 	bl	8005798 <read_data_DHT22>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <runDHT22+0x1c4>)
 8005010:	701a      	strb	r2, [r3, #0]
		 Temp_byte1 = read_data_DHT22 ();
 8005012:	f000 fbc1 	bl	8005798 <read_data_DHT22>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <runDHT22+0x1c8>)
 800501c:	701a      	strb	r2, [r3, #0]
		 Temp_byte2 = read_data_DHT22 ();
 800501e:	f000 fbbb 	bl	8005798 <read_data_DHT22>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	4b61      	ldr	r3, [pc, #388]	; (80051ac <runDHT22+0x1cc>)
 8005028:	701a      	strb	r2, [r3, #0]
		 sum = read_data_DHT22();
 800502a:	f000 fbb5 	bl	8005798 <read_data_DHT22>
 800502e:	4603      	mov	r3, r0
 8005030:	b29a      	uxth	r2, r3
 8005032:	4b5f      	ldr	r3, [pc, #380]	; (80051b0 <runDHT22+0x1d0>)
 8005034:	801a      	strh	r2, [r3, #0]
		 if (sum == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8005036:	4b5e      	ldr	r3, [pc, #376]	; (80051b0 <runDHT22+0x1d0>)
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4b58      	ldr	r3, [pc, #352]	; (80051a0 <runDHT22+0x1c0>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	4b58      	ldr	r3, [pc, #352]	; (80051a4 <runDHT22+0x1c4>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	4413      	add	r3, r2
 8005048:	4a57      	ldr	r2, [pc, #348]	; (80051a8 <runDHT22+0x1c8>)
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	4413      	add	r3, r2
 800504e:	4a57      	ldr	r2, [pc, #348]	; (80051ac <runDHT22+0x1cc>)
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	4413      	add	r3, r2
 8005054:	4299      	cmp	r1, r3
 8005056:	d117      	bne.n	8005088 <runDHT22+0xa8>
		 {
		 	TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8005058:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <runDHT22+0x1c8>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	b21a      	sxth	r2, r3
 8005060:	4b52      	ldr	r3, [pc, #328]	; (80051ac <runDHT22+0x1cc>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b21b      	sxth	r3, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	b21b      	sxth	r3, r3
 800506a:	b29a      	uxth	r2, r3
 800506c:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <runDHT22+0x1d4>)
 800506e:	801a      	strh	r2, [r3, #0]
		 	RH = ((Rh_byte1<<8)|Rh_byte2);
 8005070:	4b4b      	ldr	r3, [pc, #300]	; (80051a0 <runDHT22+0x1c0>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	b21a      	sxth	r2, r3
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <runDHT22+0x1c4>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b21b      	sxth	r3, r3
 800507e:	4313      	orrs	r3, r2
 8005080:	b21b      	sxth	r3, r3
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b4c      	ldr	r3, [pc, #304]	; (80051b8 <runDHT22+0x1d8>)
 8005086:	801a      	strh	r2, [r3, #0]
		 }
		 TEMP1 = (Temp_byte1/10);
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <runDHT22+0x1c8>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <runDHT22+0x1dc>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	b29a      	uxth	r2, r3
 8005098:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <runDHT22+0x1e0>)
 800509a:	801a      	strh	r2, [r3, #0]
		 TEMP2 = (Temp_byte1 %10);
 800509c:	4b42      	ldr	r3, [pc, #264]	; (80051a8 <runDHT22+0x1c8>)
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	4b46      	ldr	r3, [pc, #280]	; (80051bc <runDHT22+0x1dc>)
 80050a2:	fba3 1302 	umull	r1, r3, r3, r2
 80050a6:	08d9      	lsrs	r1, r3, #3
 80050a8:	460b      	mov	r3, r1
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <runDHT22+0x1e4>)
 80050b8:	801a      	strh	r2, [r3, #0]
		 sprintf(dht22Temp,"temp1.val=%d%d%c%c%c%c",(int)TEMP1,(int)TEMP2, 0xFF, 0xFF, 0xFF,'\n');
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <runDHT22+0x1e0>)
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <runDHT22+0x1e4>)
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	4619      	mov	r1, r3
 80050c6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80050ca:	230a      	movs	r3, #10
 80050cc:	9303      	str	r3, [sp, #12]
 80050ce:	23ff      	movs	r3, #255	; 0xff
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	23ff      	movs	r3, #255	; 0xff
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	460b      	mov	r3, r1
 80050dc:	493a      	ldr	r1, [pc, #232]	; (80051c8 <runDHT22+0x1e8>)
 80050de:	f000 fe8b 	bl	8005df8 <siprintf>
		 while(dht22Temp[i]!='\n'){
 80050e2:	e005      	b.n	80050f0 <runDHT22+0x110>
			 lenOfdht22Temp++;
 80050e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e6:	3301      	adds	r3, #1
 80050e8:	673b      	str	r3, [r7, #112]	; 0x70
			++i;
 80050ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ec:	3301      	adds	r3, #1
 80050ee:	677b      	str	r3, [r7, #116]	; 0x74
		 while(dht22Temp[i]!='\n'){
 80050f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80050f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b0a      	cmp	r3, #10
 80050fc:	d1f2      	bne.n	80050e4 <runDHT22+0x104>
	     }
		 i=0;
 80050fe:	2300      	movs	r3, #0
 8005100:	677b      	str	r3, [r7, #116]	; 0x74
		 HAL_UART_Transmit(&huart1,dht22Temp,lenOfdht22Temp,100);
 8005102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005104:	b29a      	uxth	r2, r3
 8005106:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800510a:	2364      	movs	r3, #100	; 0x64
 800510c:	482f      	ldr	r0, [pc, #188]	; (80051cc <runDHT22+0x1ec>)
 800510e:	f7fe fbf6 	bl	80038fe <HAL_UART_Transmit>


		 RH1 = (Rh_byte1 / 10);
 8005112:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <runDHT22+0x1c0>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4a29      	ldr	r2, [pc, #164]	; (80051bc <runDHT22+0x1dc>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	b29a      	uxth	r2, r3
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <runDHT22+0x1f0>)
 8005124:	801a      	strh	r2, [r3, #0]
		 RH2 = (Rh_byte1 % 10);
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <runDHT22+0x1c0>)
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <runDHT22+0x1dc>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	08d9      	lsrs	r1, r3, #3
 8005132:	460b      	mov	r3, r1
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	b29a      	uxth	r2, r3
 8005140:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <runDHT22+0x1f4>)
 8005142:	801a      	strh	r2, [r3, #0]
		 sprintf(dht22humidity,"humidity.val=%d%d%c%c%c%c",(int)RH1,(int)RH2, 0xFF, 0xFF, 0xFF,'\n');
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <runDHT22+0x1f0>)
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <runDHT22+0x1f4>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	4619      	mov	r1, r3
 8005150:	1d38      	adds	r0, r7, #4
 8005152:	230a      	movs	r3, #10
 8005154:	9303      	str	r3, [sp, #12]
 8005156:	23ff      	movs	r3, #255	; 0xff
 8005158:	9302      	str	r3, [sp, #8]
 800515a:	23ff      	movs	r3, #255	; 0xff
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	23ff      	movs	r3, #255	; 0xff
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	460b      	mov	r3, r1
 8005164:	491c      	ldr	r1, [pc, #112]	; (80051d8 <runDHT22+0x1f8>)
 8005166:	f000 fe47 	bl	8005df8 <siprintf>
		 while(dht22humidity[i]!='\n'){
 800516a:	e005      	b.n	8005178 <runDHT22+0x198>
			 lenOfdht22humidity++;
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	3301      	adds	r3, #1
 8005170:	66fb      	str	r3, [r7, #108]	; 0x6c
			++i;
 8005172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005174:	3301      	adds	r3, #1
 8005176:	677b      	str	r3, [r7, #116]	; 0x74
		 while(dht22humidity[i]!='\n'){
 8005178:	1d3a      	adds	r2, r7, #4
 800517a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800517c:	4413      	add	r3, r2
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b0a      	cmp	r3, #10
 8005182:	d1f3      	bne.n	800516c <runDHT22+0x18c>
		}
		i=0;
 8005184:	2300      	movs	r3, #0
 8005186:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_UART_Transmit(&huart1,dht22humidity,lenOfdht22humidity,100);
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	b29a      	uxth	r2, r3
 800518c:	1d39      	adds	r1, r7, #4
 800518e:	2364      	movs	r3, #100	; 0x64
 8005190:	480e      	ldr	r0, [pc, #56]	; (80051cc <runDHT22+0x1ec>)
 8005192:	f7fe fbb4 	bl	80038fe <HAL_UART_Transmit>
}
 8005196:	bf00      	nop
 8005198:	3778      	adds	r7, #120	; 0x78
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	200002be 	.word	0x200002be
 80051a4:	2000032e 	.word	0x2000032e
 80051a8:	20000308 	.word	0x20000308
 80051ac:	20000426 	.word	0x20000426
 80051b0:	200002bc 	.word	0x200002bc
 80051b4:	200002c2 	.word	0x200002c2
 80051b8:	200002c0 	.word	0x200002c0
 80051bc:	cccccccd 	.word	0xcccccccd
 80051c0:	200003a0 	.word	0x200003a0
 80051c4:	200002c4 	.word	0x200002c4
 80051c8:	08006ffc 	.word	0x08006ffc
 80051cc:	200002c8 	.word	0x200002c8
 80051d0:	20000424 	.word	0x20000424
 80051d4:	2000032c 	.word	0x2000032c
 80051d8:	08007014 	.word	0x08007014

080051dc <ReadCalPara>:
	 //HAL_Delay(100);
}

/* IT IS FOR BMP180 PRES SENSOR*/
/*Function to read calibration parameters */
void ReadCalPara(){
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
    AC1 = ReadInt(0xAA);	//Read value for AC1 register
 80051e0:	20aa      	movs	r0, #170	; 0xaa
 80051e2:	f000 f851 	bl	8005288 <ReadInt>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b25      	ldr	r3, [pc, #148]	; (8005280 <ReadCalPara+0xa4>)
 80051ec:	801a      	strh	r2, [r3, #0]
    AC2 = ReadInt(0xAC);	//Read value for AC2 register
 80051ee:	20ac      	movs	r0, #172	; 0xac
 80051f0:	f000 f84a 	bl	8005288 <ReadInt>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b21      	ldr	r3, [pc, #132]	; (8005280 <ReadCalPara+0xa4>)
 80051fa:	805a      	strh	r2, [r3, #2]
    AC3 = ReadInt(0xAE);	//Read value for AC3 register
 80051fc:	20ae      	movs	r0, #174	; 0xae
 80051fe:	f000 f843 	bl	8005288 <ReadInt>
 8005202:	4603      	mov	r3, r0
 8005204:	461a      	mov	r2, r3
 8005206:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <ReadCalPara+0xa4>)
 8005208:	809a      	strh	r2, [r3, #4]
    AC4 = ReadUInt(0xB0);	//Read value for AC4 register
 800520a:	20b0      	movs	r0, #176	; 0xb0
 800520c:	f000 f85a 	bl	80052c4 <ReadUInt>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <ReadCalPara+0xa8>)
 8005216:	801a      	strh	r2, [r3, #0]
    AC5 = ReadUInt(0xB2);	//Read value for AC5 register
 8005218:	20b2      	movs	r0, #178	; 0xb2
 800521a:	f000 f853 	bl	80052c4 <ReadUInt>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <ReadCalPara+0xa8>)
 8005224:	805a      	strh	r2, [r3, #2]
    AC6 = ReadUInt(0xB4);	//Read value for AC6 register
 8005226:	20b4      	movs	r0, #180	; 0xb4
 8005228:	f000 f84c 	bl	80052c4 <ReadUInt>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <ReadCalPara+0xa8>)
 8005232:	809a      	strh	r2, [r3, #4]
    B1 = ReadInt(0xB6);		//Read value for B1 register
 8005234:	20b6      	movs	r0, #182	; 0xb6
 8005236:	f000 f827 	bl	8005288 <ReadInt>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <ReadCalPara+0xa4>)
 8005240:	80da      	strh	r2, [r3, #6]
    B2 = ReadInt(0xB8);		//Read value for B2 register
 8005242:	20b8      	movs	r0, #184	; 0xb8
 8005244:	f000 f820 	bl	8005288 <ReadInt>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <ReadCalPara+0xa4>)
 800524e:	811a      	strh	r2, [r3, #8]
    MB = ReadInt(0xBA);		//Read value for MB register
 8005250:	20ba      	movs	r0, #186	; 0xba
 8005252:	f000 f819 	bl	8005288 <ReadInt>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <ReadCalPara+0xa4>)
 800525c:	815a      	strh	r2, [r3, #10]
    MC= ReadInt(0xBC);		//Read value for MC register
 800525e:	20bc      	movs	r0, #188	; 0xbc
 8005260:	f000 f812 	bl	8005288 <ReadInt>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <ReadCalPara+0xa4>)
 800526a:	819a      	strh	r2, [r3, #12]
    MD = ReadInt(0xBE);		//Read value for MD register
 800526c:	20be      	movs	r0, #190	; 0xbe
 800526e:	f000 f80b 	bl	8005288 <ReadInt>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	4b02      	ldr	r3, [pc, #8]	; (8005280 <ReadCalPara+0xa4>)
 8005278:	81da      	strh	r2, [r3, #14]
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000258 	.word	0x20000258
 8005284:	20000358 	.word	0x20000358

08005288 <ReadInt>:
/*Read signed integer from I2C bus*/
int16_t ReadInt(char address){
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];									// Temporary variable to store raw value
	int16_t result=0;								// variable to be return
 8005292:	2300      	movs	r3, #0
 8005294:	81fb      	strh	r3, [r7, #14]
	ReadRegister(BMP180_ADDR,address,temp,2);		// Read raw value from I2C bus
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <ReadInt+0x38>)
 8005298:	7818      	ldrb	r0, [r3, #0]
 800529a:	f107 020c 	add.w	r2, r7, #12
 800529e:	79f9      	ldrb	r1, [r7, #7]
 80052a0:	2302      	movs	r3, #2
 80052a2:	f000 f9c5 	bl	8005630 <ReadRegister>
	result=((temp[0]<<8)|temp[1]);					// convert the raw value to integer
 80052a6:	7b3b      	ldrb	r3, [r7, #12]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	7b7b      	ldrb	r3, [r7, #13]
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	81fb      	strh	r3, [r7, #14]
	return result;									// Return integer
 80052b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000005 	.word	0x20000005

080052c4 <ReadUInt>:
/*Read unsigned integer from I2C bus*/
uint16_t ReadUInt(char address){
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];									// Temporary variable to store raw value
	uint16_t result=0;								// variable to be return
 80052ce:	2300      	movs	r3, #0
 80052d0:	81fb      	strh	r3, [r7, #14]
	ReadRegister(BMP180_ADDR,address,temp,2);		// Read raw value from I2C bus
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <ReadUInt+0x38>)
 80052d4:	7818      	ldrb	r0, [r3, #0]
 80052d6:	f107 020c 	add.w	r2, r7, #12
 80052da:	79f9      	ldrb	r1, [r7, #7]
 80052dc:	2302      	movs	r3, #2
 80052de:	f000 f9a7 	bl	8005630 <ReadRegister>
	result=((temp[0]<<8)|temp[1]);					// convert the raw value to integer
 80052e2:	7b3b      	ldrb	r3, [r7, #12]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	b21a      	sxth	r2, r3
 80052e8:	7b7b      	ldrb	r3, [r7, #13]
 80052ea:	b21b      	sxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b21b      	sxth	r3, r3
 80052f0:	81fb      	strh	r3, [r7, #14]
	return result;									// Return integer
 80052f2:	89fb      	ldrh	r3, [r7, #14]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000005 	.word	0x20000005

08005300 <ReadBMP180>:
/*Read values from BMP180 sensor*/
void ReadBMP180(){
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b0a3      	sub	sp, #140	; 0x8c
 8005304:	af04      	add	r7, sp, #16
	int32_t X1,X2,B5,ut,p,B6,X3,B3;					// Temporary signed variable to calculate pressure and temperature
	uint32_t B4,B7;									// Temporary unsigned variable to calculate pressure and temperature
	char sampling_mode = LOW_POWER;		// Working mode for BMP180 sensor
 8005306:	2300      	movs	r3, #0
 8005308:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	float temperature=0.0;							// variable to carry temperature data
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	667b      	str	r3, [r7, #100]	; 0x64
	int32_t UT,UP;									// variable to carry integer value of Temperature and pressure

	char dizi2[50];// it is for press val
	int lenOfDizi2=0;
 8005312:	2300      	movs	r3, #0
 8005314:	673b      	str	r3, [r7, #112]	; 0x70
	int i=0;
 8005316:	2300      	movs	r3, #0
 8005318:	66fb      	str	r3, [r7, #108]	; 0x6c

	UT=ReadSensor(READ_TEMP_CMD,sampling_mode,2);		// Read Temperature and given mode
 800531a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800531e:	2202      	movs	r2, #2
 8005320:	4619      	mov	r1, r3
 8005322:	202e      	movs	r0, #46	; 0x2e
 8005324:	f000 f91a 	bl	800555c <ReadSensor>
 8005328:	6638      	str	r0, [r7, #96]	; 0x60
	if(UT!=0){										// check for valid reading
 800532a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80fc 	beq.w	800552a <ReadBMP180+0x22a>
		X1=(UT-AC6) * AC5>>15;						// calculation to obtain
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <ReadBMP180+0x240>)
 8005334:	889b      	ldrh	r3, [r3, #4]
 8005336:	461a      	mov	r2, r3
 8005338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	4a80      	ldr	r2, [pc, #512]	; (8005540 <ReadBMP180+0x240>)
 800533e:	8852      	ldrh	r2, [r2, #2]
 8005340:	fb02 f303 	mul.w	r3, r2, r3
 8005344:	13db      	asrs	r3, r3, #15
 8005346:	65fb      	str	r3, [r7, #92]	; 0x5c
		X2=(MC<<11)/(X1+MD);						// Temperature from raw
 8005348:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <ReadBMP180+0x244>)
 800534a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800534e:	02da      	lsls	r2, r3, #11
 8005350:	4b7c      	ldr	r3, [pc, #496]	; (8005544 <ReadBMP180+0x244>)
 8005352:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005356:	4619      	mov	r1, r3
 8005358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800535a:	440b      	add	r3, r1
 800535c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005360:	65bb      	str	r3, [r7, #88]	; 0x58
		B5=X1+X2;									// values for more details
 8005362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005366:	4413      	add	r3, r2
 8005368:	657b      	str	r3, [r7, #84]	; 0x54
		ut=(B5+8)>>4;								// refer section 3.5 in BMP180
 800536a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536c:	3308      	adds	r3, #8
 800536e:	111b      	asrs	r3, r3, #4
 8005370:	653b      	str	r3, [r7, #80]	; 0x50
		temperature = ut *0.1;						// sensor datasheet.
 8005372:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005374:	f7fb f8de 	bl	8000534 <__aeabi_i2d>
 8005378:	a36f      	add	r3, pc, #444	; (adr r3, 8005538 <ReadBMP180+0x238>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f7fb f943 	bl	8000608 <__aeabi_dmul>
 8005382:	4603      	mov	r3, r0
 8005384:	460c      	mov	r4, r1
 8005386:	4618      	mov	r0, r3
 8005388:	4621      	mov	r1, r4
 800538a:	f7fb fb4f 	bl	8000a2c <__aeabi_d2f>
 800538e:	4603      	mov	r3, r0
 8005390:	667b      	str	r3, [r7, #100]	; 0x64

		UP=ReadSensor(READ_PRESSURE_CMD,sampling_mode,3);			// read raw values of pressure
 8005392:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005396:	2203      	movs	r2, #3
 8005398:	4619      	mov	r1, r3
 800539a:	2034      	movs	r0, #52	; 0x34
 800539c:	f000 f8de 	bl	800555c <ReadSensor>
 80053a0:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(UP!=0){									// check for valid reading
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80c0 	beq.w	800552a <ReadBMP180+0x22a>
			UP = (UP>>(8-sampling_mode));
 80053aa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80053ae:	f1c3 0308 	rsb	r3, r3, #8
 80053b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053b4:	fa42 f303 	asr.w	r3, r2, r3
 80053b8:	64fb      	str	r3, [r7, #76]	; 0x4c
			B6=B5-4000;								// calculations to extract pressure
 80053ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053bc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
			X1=(B2*((B6*B6)>>12))>>11;				// reading from BMP180 sensor
 80053c2:	4b60      	ldr	r3, [pc, #384]	; (8005544 <ReadBMP180+0x244>)
 80053c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053c8:	4619      	mov	r1, r3
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	131b      	asrs	r3, r3, #12
 80053d4:	fb03 f301 	mul.w	r3, r3, r1
 80053d8:	12db      	asrs	r3, r3, #11
 80053da:	65fb      	str	r3, [r7, #92]	; 0x5c
			X2=(AC2*B6)>>11;						// all the calculations shown
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <ReadBMP180+0x244>)
 80053de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	fb03 f302 	mul.w	r3, r3, r2
 80053ea:	12db      	asrs	r3, r3, #11
 80053ec:	65bb      	str	r3, [r7, #88]	; 0x58
			X3=X1+X2;								// in the datasheet are carry
 80053ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f2:	4413      	add	r3, r2
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
			B3=((((AC1*4)+X3)<<sampling_mode)+2)/4;// forward in this step
 80053f6:	4b53      	ldr	r3, [pc, #332]	; (8005544 <ReadBMP180+0x244>)
 80053f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	441a      	add	r2, r3
 8005402:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	3302      	adds	r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	da00      	bge.n	8005412 <ReadBMP180+0x112>
 8005410:	3303      	adds	r3, #3
 8005412:	109b      	asrs	r3, r3, #2
 8005414:	643b      	str	r3, [r7, #64]	; 0x40
			X1=(AC3*B6)>>13;						// for more details on this
 8005416:	4b4b      	ldr	r3, [pc, #300]	; (8005544 <ReadBMP180+0x244>)
 8005418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800541c:	461a      	mov	r2, r3
 800541e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005420:	fb03 f302 	mul.w	r3, r3, r2
 8005424:	135b      	asrs	r3, r3, #13
 8005426:	65fb      	str	r3, [r7, #92]	; 0x5c
			X2=(B1*((B6*B6)>>12))>>16;				// please refer section 3.5 in
 8005428:	4b46      	ldr	r3, [pc, #280]	; (8005544 <ReadBMP180+0x244>)
 800542a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800542e:	4619      	mov	r1, r3
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	131b      	asrs	r3, r3, #12
 800543a:	fb03 f301 	mul.w	r3, r3, r1
 800543e:	141b      	asrs	r3, r3, #16
 8005440:	65bb      	str	r3, [r7, #88]	; 0x58
			X3 = (X1 + X2 + 2) >> 2;				// BMP180 sensor datasheet.
 8005442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005446:	4413      	add	r3, r2
 8005448:	3302      	adds	r3, #2
 800544a:	109b      	asrs	r3, r3, #2
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
			B4=(uint32_t)AC4*(uint32_t)(X3+32768)>>15;					//
 800544e:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <ReadBMP180+0x240>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800545a:	fb03 f302 	mul.w	r3, r3, r2
 800545e:	0bdb      	lsrs	r3, r3, #15
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
			B7=(uint32_t)(UP-B3)*(50000>>sampling_mode);		//
 8005462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	4619      	mov	r1, r3
 800546a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800546e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005472:	fa42 f303 	asr.w	r3, r2, r3
 8005476:	fb03 f301 	mul.w	r3, r3, r1
 800547a:	63bb      	str	r3, [r7, #56]	; 0x38
			if (B7 < 0x80000000)					//
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	2b00      	cmp	r3, #0
 8005480:	db06      	blt.n	8005490 <ReadBMP180+0x190>
				p = (B7 * 2) / B4;					//
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	005a      	lsls	r2, r3, #1
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	677b      	str	r3, [r7, #116]	; 0x74
 800548e:	e005      	b.n	800549c <ReadBMP180+0x19c>
			else									//
				p = (B7 / B4) * 2;					//
 8005490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	677b      	str	r3, [r7, #116]	; 0x74
			X1 = (p >> 8) * (p >> 8);				//
 800549c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549e:	121b      	asrs	r3, r3, #8
 80054a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80054a2:	1212      	asrs	r2, r2, #8
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
			X1 = (X1 * 3038) >> 16;					//
 80054aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ac:	f640 32de 	movw	r2, #3038	; 0xbde
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	141b      	asrs	r3, r3, #16
 80054b6:	65fb      	str	r3, [r7, #92]	; 0x5c
			X2 = (-7357 * p) >> 16;					//
 80054b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ba:	4a23      	ldr	r2, [pc, #140]	; (8005548 <ReadBMP180+0x248>)
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	141b      	asrs	r3, r3, #16
 80054c2:	65bb      	str	r3, [r7, #88]	; 0x58
			GLOBAL_PRES = (p + ((X1 + X2 + 3791) >> 4));		//
 80054c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c8:	4413      	add	r3, r2
 80054ca:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80054ce:	111a      	asrs	r2, r3, #4
 80054d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d2:	4413      	add	r3, r2
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <ReadBMP180+0x24c>)
 80054d6:	6013      	str	r3, [r2, #0]

			sprintf(dizi2,"press.val=%d%c%c%c%c",(int)GLOBAL_PRES/100, 0xFF, 0xFF, 0xFF,'\n');
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <ReadBMP180+0x24c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <ReadBMP180+0x250>)
 80054de:	fb82 1203 	smull	r1, r2, r2, r3
 80054e2:	1152      	asrs	r2, r2, #5
 80054e4:	17db      	asrs	r3, r3, #31
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	1d38      	adds	r0, r7, #4
 80054ea:	230a      	movs	r3, #10
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	23ff      	movs	r3, #255	; 0xff
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	23ff      	movs	r3, #255	; 0xff
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	23ff      	movs	r3, #255	; 0xff
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <ReadBMP180+0x254>)
 80054fa:	f000 fc7d 	bl	8005df8 <siprintf>
			while(dizi2[i]!='\n'){
 80054fe:	e005      	b.n	800550c <ReadBMP180+0x20c>
				lenOfDizi2++;
 8005500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005502:	3301      	adds	r3, #1
 8005504:	673b      	str	r3, [r7, #112]	; 0x70
				++i;
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	3301      	adds	r3, #1
 800550a:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(dizi2[i]!='\n'){
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b0a      	cmp	r3, #10
 8005516:	d1f3      	bne.n	8005500 <ReadBMP180+0x200>
			}
			i=0;
 8005518:	2300      	movs	r3, #0
 800551a:	66fb      	str	r3, [r7, #108]	; 0x6c
			HAL_UART_Transmit(&huart1,dizi2,lenOfDizi2,100);
 800551c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551e:	b29a      	uxth	r2, r3
 8005520:	1d39      	adds	r1, r7, #4
 8005522:	2364      	movs	r3, #100	; 0x64
 8005524:	480c      	ldr	r0, [pc, #48]	; (8005558 <ReadBMP180+0x258>)
 8005526:	f7fe f9ea 	bl	80038fe <HAL_UART_Transmit>
		}
	}
}
 800552a:	bf00      	nop
 800552c:	377c      	adds	r7, #124	; 0x7c
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	bf00      	nop
 8005534:	f3af 8000 	nop.w
 8005538:	9999999a 	.word	0x9999999a
 800553c:	3fb99999 	.word	0x3fb99999
 8005540:	20000358 	.word	0x20000358
 8005544:	20000258 	.word	0x20000258
 8005548:	ffffe343 	.word	0xffffe343
 800554c:	200001f8 	.word	0x200001f8
 8005550:	51eb851f 	.word	0x51eb851f
 8005554:	0800704c 	.word	0x0800704c
 8005558:	200002c8 	.word	0x200002c8

0800555c <ReadSensor>:
/*Function to Read the raw values from the sensor*/
int32_t ReadSensor(char data,char mode,uint8_t length){
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
 8005566:	460b      	mov	r3, r1
 8005568:	71bb      	strb	r3, [r7, #6]
 800556a:	4613      	mov	r3, r2
 800556c:	717b      	strb	r3, [r7, #5]
	uint8_t response[3],x=0;							//Local variables declaration
 800556e:	2300      	movs	r3, #0
 8005570:	75fb      	strb	r3, [r7, #23]
	data = data | (mode<<6);						//append mode in control register
 8005572:	79bb      	ldrb	r3, [r7, #6]
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	b25a      	sxtb	r2, r3
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	4313      	orrs	r3, r2
 800557e:	b25b      	sxtb	r3, r3
 8005580:	71fb      	strb	r3, [r7, #7]
	WriteRegister(BMP180_ADDR,BMP180_CNTL_REG_ADDR,data);//start pressure sensor in given mode
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <ReadSensor+0xac>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	79fa      	ldrb	r2, [r7, #7]
 8005588:	21f4      	movs	r1, #244	; 0xf4
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f87c 	bl	8005688 <WriteRegister>
	do{
		x++;										//increment x to each milliseconds
 8005590:	7dfb      	ldrb	r3, [r7, #23]
 8005592:	3301      	adds	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(1);									//delay for 1 milliseconds
 8005596:	2001      	movs	r0, #1
 8005598:	f7fb fc8a 	bl	8000eb0 <HAL_Delay>
		ReadRegister(BMP180_ADDR,BMP180_CNTL_REG_ADDR,&response[0],1);//read busy status of sensor
 800559c:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <ReadSensor+0xac>)
 800559e:	7818      	ldrb	r0, [r3, #0]
 80055a0:	f107 020c 	add.w	r2, r7, #12
 80055a4:	2301      	movs	r3, #1
 80055a6:	21f4      	movs	r1, #244	; 0xf4
 80055a8:	f000 f842 	bl	8005630 <ReadRegister>
		if(x>=30)									//if no response received with
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b1d      	cmp	r3, #29
 80055b0:	d901      	bls.n	80055b6 <ReadSensor+0x5a>
			return 0;								// 30 milliseconds then return 0.
 80055b2:	2300      	movs	r3, #0
 80055b4:	e023      	b.n	80055fe <ReadSensor+0xa2>
	}while((response[0]&0x20)!=0x00);				// wait until sensor is busy
 80055b6:	7b3b      	ldrb	r3, [r7, #12]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e7      	bne.n	8005590 <ReadSensor+0x34>
	ReadRegister(BMP180_ADDR,BMP180_RAW_VALUE_ADDR,response,length);//read the raw data from sensor
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <ReadSensor+0xac>)
 80055c2:	7818      	ldrb	r0, [r3, #0]
 80055c4:	797b      	ldrb	r3, [r7, #5]
 80055c6:	f107 020c 	add.w	r2, r7, #12
 80055ca:	21f6      	movs	r1, #246	; 0xf6
 80055cc:	f000 f830 	bl	8005630 <ReadRegister>
	int32_t result= 0 ;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
	if(length==2)
 80055d4:	797b      	ldrb	r3, [r7, #5]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d105      	bne.n	80055e6 <ReadSensor+0x8a>
		result = ((response[0]<<8) | response[1]);	// convert bytes into signed integer
 80055da:	7b3b      	ldrb	r3, [r7, #12]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	7b7a      	ldrb	r2, [r7, #13]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e00a      	b.n	80055fc <ReadSensor+0xa0>
	else if(length==3)
 80055e6:	797b      	ldrb	r3, [r7, #5]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d107      	bne.n	80055fc <ReadSensor+0xa0>
		result = ((response[0]<<16) | (response[1]<<8) | response[2]);//convert bytes into signed integer
 80055ec:	7b3b      	ldrb	r3, [r7, #12]
 80055ee:	041a      	lsls	r2, r3, #16
 80055f0:	7b7b      	ldrb	r3, [r7, #13]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	4313      	orrs	r3, r2
 80055f6:	7bba      	ldrb	r2, [r7, #14]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
	return result;									//return the result
 80055fc:	693b      	ldr	r3, [r7, #16]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000005 	.word	0x20000005

0800560c <SetupBMP>:
/*function to setup BMP180 sensor*/
void SetupBMP(){
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
	uint8_t prxbuf[1];									// local variable
	ReadRegister(BMP180_ADDR,0xD0,prxbuf,1);		// read BMP180 sensor ID
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <SetupBMP+0x20>)
 8005614:	7818      	ldrb	r0, [r3, #0]
 8005616:	1d3a      	adds	r2, r7, #4
 8005618:	2301      	movs	r3, #1
 800561a:	21d0      	movs	r1, #208	; 0xd0
 800561c:	f000 f808 	bl	8005630 <ReadRegister>
//	Debug.printf("BMP ID : %02x \r\n",prxbuf[0]);	// display ID
	ReadCalPara();									// read calibration data from the sensor
 8005620:	f7ff fddc 	bl	80051dc <ReadCalPara>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000005 	.word	0x20000005

08005630 <ReadRegister>:
/*function to read RAW values from I2C bus*/
void ReadRegister(uint8_t DevAddress,uint8_t Address,uint8_t * Buffer,uint8_t length){
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af02      	add	r7, sp, #8
 8005636:	603a      	str	r2, [r7, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
 800563e:	460b      	mov	r3, r1
 8005640:	71bb      	strb	r3, [r7, #6]
 8005642:	4613      	mov	r3, r2
 8005644:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1,DevAddress&0xFE,&Address,1,10);// send device address and register address
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800564e:	b299      	uxth	r1, r3
 8005650:	1dba      	adds	r2, r7, #6
 8005652:	230a      	movs	r3, #10
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	2301      	movs	r3, #1
 8005658:	480a      	ldr	r0, [pc, #40]	; (8005684 <ReadRegister+0x54>)
 800565a:	f7fc f86b 	bl	8001734 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,DevAddress|0x01,Buffer,length,10);// read data from sensor
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	b299      	uxth	r1, r3
 8005668:	797b      	ldrb	r3, [r7, #5]
 800566a:	b29a      	uxth	r2, r3
 800566c:	230a      	movs	r3, #10
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4803      	ldr	r0, [pc, #12]	; (8005684 <ReadRegister+0x54>)
 8005676:	f7fc f95b 	bl	8001930 <HAL_I2C_Master_Receive>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000268 	.word	0x20000268

08005688 <WriteRegister>:

/*function to write RAW values on I2C bus*/
void WriteRegister(uint8_t DevAddress,char address,char content){
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
 8005692:	460b      	mov	r3, r1
 8005694:	71bb      	strb	r3, [r7, #6]
 8005696:	4613      	mov	r3, r2
 8005698:	717b      	strb	r3, [r7, #5]
	uint8_t data[2]={address,content};					// local variable to store addres and data to be written
 800569a:	79bb      	ldrb	r3, [r7, #6]
 800569c:	733b      	strb	r3, [r7, #12]
 800569e:	797b      	ldrb	r3, [r7, #5]
 80056a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,DevAddress&0xFE,data,2,10);//	write the address and data to the I2C bus
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80056aa:	b299      	uxth	r1, r3
 80056ac:	f107 020c 	add.w	r2, r7, #12
 80056b0:	230a      	movs	r3, #10
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	2302      	movs	r3, #2
 80056b6:	4803      	ldr	r0, [pc, #12]	; (80056c4 <WriteRegister+0x3c>)
 80056b8:	f7fc f83c 	bl	8001734 <HAL_I2C_Master_Transmit>
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000268 	.word	0x20000268

080056c8 <set_gpio_output_DHT22>:

/*IT IS FOR DHT22 SENSOR */
void set_gpio_output_DHT22 (void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
	/*Configure GPIO pin output: PA4 */
  GPIO_InitStruct2.Pin = GPIO_PIN_4;
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <set_gpio_output_DHT22+0x24>)
 80056ce:	2210      	movs	r2, #16
 80056d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <set_gpio_output_DHT22+0x24>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <set_gpio_output_DHT22+0x24>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct2);
 80056de:	4903      	ldr	r1, [pc, #12]	; (80056ec <set_gpio_output_DHT22+0x24>)
 80056e0:	4803      	ldr	r0, [pc, #12]	; (80056f0 <set_gpio_output_DHT22+0x28>)
 80056e2:	f7fb fd3b 	bl	800115c <HAL_GPIO_Init>
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000330 	.word	0x20000330
 80056f0:	40020000 	.word	0x40020000

080056f4 <set_gpio_input_DHT22>:

void set_gpio_input_DHT22 (void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	/*Configure GPIO pin input: PA4 */
  GPIO_InitStruct2.Pin = GPIO_PIN_4;
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <set_gpio_input_DHT22+0x24>)
 80056fa:	2210      	movs	r2, #16
 80056fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct2.Mode = GPIO_MODE_INPUT;
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <set_gpio_input_DHT22+0x24>)
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <set_gpio_input_DHT22+0x24>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct2);
 800570a:	4903      	ldr	r1, [pc, #12]	; (8005718 <set_gpio_input_DHT22+0x24>)
 800570c:	4803      	ldr	r0, [pc, #12]	; (800571c <set_gpio_input_DHT22+0x28>)
 800570e:	f7fb fd25 	bl	800115c <HAL_GPIO_Init>
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000330 	.word	0x20000330
 800571c:	40020000 	.word	0x40020000

08005720 <DHT22_start>:
void DHT22_start (void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
		set_gpio_output_DHT22();  // set the pin as output
 8005724:	f7ff ffd0 	bl	80056c8 <set_gpio_output_DHT22>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, 0);   // pull the pin low
 8005728:	2200      	movs	r2, #0
 800572a:	2110      	movs	r1, #16
 800572c:	4805      	ldr	r0, [pc, #20]	; (8005744 <DHT22_start+0x24>)
 800572e:	f7fb feaf 	bl	8001490 <HAL_GPIO_WritePin>
		delay (18000);   // wait for 18ms
 8005732:	f244 6050 	movw	r0, #18000	; 0x4650
 8005736:	f7ff fc3b 	bl	8004fb0 <delay>
		set_gpio_input_DHT22();   // set as input
 800573a:	f7ff ffdb 	bl	80056f4 <set_gpio_input_DHT22>
}
 800573e:	bf00      	nop
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40020000 	.word	0x40020000

08005748 <check_response>:
void check_response (void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
	delay (40);
 800574c:	2028      	movs	r0, #40	; 0x28
 800574e:	f7ff fc2f 	bl	8004fb0 <delay>
	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)))
 8005752:	2110      	movs	r1, #16
 8005754:	480e      	ldr	r0, [pc, #56]	; (8005790 <check_response+0x48>)
 8005756:	f7fb fe83 	bl	8001460 <HAL_GPIO_ReadPin>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <check_response+0x32>
	{
		delay (80);
 8005760:	2050      	movs	r0, #80	; 0x50
 8005762:	f7ff fc25 	bl	8004fb0 <delay>
		if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4))) checkForDHT22 = 1;
 8005766:	2110      	movs	r1, #16
 8005768:	4809      	ldr	r0, [pc, #36]	; (8005790 <check_response+0x48>)
 800576a:	f7fb fe79 	bl	8001460 <HAL_GPIO_ReadPin>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <check_response+0x32>
 8005774:	4b07      	ldr	r3, [pc, #28]	; (8005794 <check_response+0x4c>)
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)));   // wait for the pin to go low
 800577a:	bf00      	nop
 800577c:	2110      	movs	r1, #16
 800577e:	4804      	ldr	r0, [pc, #16]	; (8005790 <check_response+0x48>)
 8005780:	f7fb fe6e 	bl	8001460 <HAL_GPIO_ReadPin>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f8      	bne.n	800577c <check_response+0x34>
}
 800578a:	bf00      	nop
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40020000 	.word	0x40020000
 8005794:	200001fc 	.word	0x200001fc

08005798 <read_data_DHT22>:

uint8_t read_data_DHT22 (void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800579e:	2300      	movs	r3, #0
 80057a0:	71bb      	strb	r3, [r7, #6]
 80057a2:	e037      	b.n	8005814 <read_data_DHT22+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)));   // wait for the pin to go high
 80057a4:	bf00      	nop
 80057a6:	2110      	movs	r1, #16
 80057a8:	481e      	ldr	r0, [pc, #120]	; (8005824 <read_data_DHT22+0x8c>)
 80057aa:	f7fb fe59 	bl	8001460 <HAL_GPIO_ReadPin>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f8      	beq.n	80057a6 <read_data_DHT22+0xe>
		delay (40);   // wait for 40 us
 80057b4:	2028      	movs	r0, #40	; 0x28
 80057b6:	f7ff fbfb 	bl	8004fb0 <delay>
		if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)) == 0)   // if the pin is low
 80057ba:	2110      	movs	r1, #16
 80057bc:	4819      	ldr	r0, [pc, #100]	; (8005824 <read_data_DHT22+0x8c>)
 80057be:	f7fb fe4f 	bl	8001460 <HAL_GPIO_ReadPin>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10e      	bne.n	80057e6 <read_data_DHT22+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80057c8:	79bb      	ldrb	r3, [r7, #6]
 80057ca:	f1c3 0307 	rsb	r3, r3, #7
 80057ce:	2201      	movs	r2, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	b25a      	sxtb	r2, r3
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	4013      	ands	r3, r2
 80057e0:	b25b      	sxtb	r3, r3
 80057e2:	71fb      	strb	r3, [r7, #7]
 80057e4:	e00b      	b.n	80057fe <read_data_DHT22+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	f1c3 0307 	rsb	r3, r3, #7
 80057ec:	2201      	movs	r2, #1
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	b25a      	sxtb	r2, r3
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4)));  // wait for the pin to go low
 80057fe:	bf00      	nop
 8005800:	2110      	movs	r1, #16
 8005802:	4808      	ldr	r0, [pc, #32]	; (8005824 <read_data_DHT22+0x8c>)
 8005804:	f7fb fe2c 	bl	8001460 <HAL_GPIO_ReadPin>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f8      	bne.n	8005800 <read_data_DHT22+0x68>
	for (j=0;j<8;j++)
 800580e:	79bb      	ldrb	r3, [r7, #6]
 8005810:	3301      	adds	r3, #1
 8005812:	71bb      	strb	r3, [r7, #6]
 8005814:	79bb      	ldrb	r3, [r7, #6]
 8005816:	2b07      	cmp	r3, #7
 8005818:	d9c4      	bls.n	80057a4 <read_data_DHT22+0xc>
	}
	return i;
 800581a:	79fb      	ldrb	r3, [r7, #7]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40020000 	.word	0x40020000

08005828 <HAL_UART_RxCpltCallback>:
/*--------------------------------------------------------------------------*/

/*IT IS FOR PULSE SENSOR WITH INTERRUTP*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af04      	add	r7, sp, #16
 800582e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart6, tempData, 3);
 8005834:	2203      	movs	r2, #3
 8005836:	491f      	ldr	r1, [pc, #124]	; (80058b4 <HAL_UART_RxCpltCallback+0x8c>)
 8005838:	481f      	ldr	r0, [pc, #124]	; (80058b8 <HAL_UART_RxCpltCallback+0x90>)
 800583a:	f7fe f8f9 	bl	8003a30 <HAL_UART_Receive_IT>
	    //pulseRes = (int) tempData[0];
		sscanf(tempData,"%d", &pulseRes);
 800583e:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_UART_RxCpltCallback+0x94>)
 8005840:	491f      	ldr	r1, [pc, #124]	; (80058c0 <HAL_UART_RxCpltCallback+0x98>)
 8005842:	481c      	ldr	r0, [pc, #112]	; (80058b4 <HAL_UART_RxCpltCallback+0x8c>)
 8005844:	f000 faf8 	bl	8005e38 <siscanf>
		//sscanf(str, "%d", &x);
		sprintf(pulseValue,"pulse.val=%d%c%c%c%c",pulseRes,0xFF, 0xFF, 0xFF,'\n');
 8005848:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <HAL_UART_RxCpltCallback+0x94>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	230a      	movs	r3, #10
 800584e:	9302      	str	r3, [sp, #8]
 8005850:	23ff      	movs	r3, #255	; 0xff
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	23ff      	movs	r3, #255	; 0xff
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	23ff      	movs	r3, #255	; 0xff
 800585a:	491a      	ldr	r1, [pc, #104]	; (80058c4 <HAL_UART_RxCpltCallback+0x9c>)
 800585c:	481a      	ldr	r0, [pc, #104]	; (80058c8 <HAL_UART_RxCpltCallback+0xa0>)
 800585e:	f000 facb 	bl	8005df8 <siprintf>
		while(pulseValue[i]!='\n'){
 8005862:	e007      	b.n	8005874 <HAL_UART_RxCpltCallback+0x4c>
			lenOfPulseValue++;
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_UART_RxCpltCallback+0xa4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	4a18      	ldr	r2, [pc, #96]	; (80058cc <HAL_UART_RxCpltCallback+0xa4>)
 800586c:	6013      	str	r3, [r2, #0]
			++i;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
		while(pulseValue[i]!='\n'){
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_UART_RxCpltCallback+0xa0>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b0a      	cmp	r3, #10
 800587e:	d1f1      	bne.n	8005864 <HAL_UART_RxCpltCallback+0x3c>
		}
		i=0;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1,pulseValue,lenOfPulseValue,100);
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <HAL_UART_RxCpltCallback+0xa4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b29a      	uxth	r2, r3
 800588a:	2364      	movs	r3, #100	; 0x64
 800588c:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_UART_RxCpltCallback+0xa0>)
 800588e:	4810      	ldr	r0, [pc, #64]	; (80058d0 <HAL_UART_RxCpltCallback+0xa8>)
 8005890:	f7fe f835 	bl	80038fe <HAL_UART_Transmit>

		lenOfPulseValue=0;
 8005894:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_UART_RxCpltCallback+0xa4>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
		//pulseRes = 0;

		//HAL_Delay(500);
		tempData[0] = '\000';
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_UART_RxCpltCallback+0x8c>)
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
		tempData[1] = '\000';
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_UART_RxCpltCallback+0x8c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	705a      	strb	r2, [r3, #1]
		tempData[2] = '\000';
 80058a6:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_UART_RxCpltCallback+0x8c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	709a      	strb	r2, [r3, #2]
		 //HAL_Delay(100);
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000428 	.word	0x20000428
 80058b8:	200003a4 	.word	0x200003a4
 80058bc:	20000204 	.word	0x20000204
 80058c0:	08007030 	.word	0x08007030
 80058c4:	08007034 	.word	0x08007034
 80058c8:	20000224 	.word	0x20000224
 80058cc:	20000200 	.word	0x20000200
 80058d0:	200002c8 	.word	0x200002c8

080058d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <HAL_MspInit+0x4c>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <HAL_MspInit+0x4c>)
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <HAL_MspInit+0x4c>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_MspInit+0x4c>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <HAL_MspInit+0x4c>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <HAL_MspInit+0x4c>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005922:	2007      	movs	r0, #7
 8005924:	f7fb fbb6 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40023800 	.word	0x40023800

08005934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_I2C_MspInit+0x84>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d12c      	bne.n	80059b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_I2C_MspInit+0x88>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <HAL_I2C_MspInit+0x88>)
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	6313      	str	r3, [r2, #48]	; 0x30
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <HAL_I2C_MspInit+0x88>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005978:	2312      	movs	r3, #18
 800597a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800597c:	2301      	movs	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005980:	2303      	movs	r3, #3
 8005982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005984:	2304      	movs	r3, #4
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4619      	mov	r1, r3
 800598e:	480c      	ldr	r0, [pc, #48]	; (80059c0 <HAL_I2C_MspInit+0x8c>)
 8005990:	f7fb fbe4 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_I2C_MspInit+0x88>)
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_I2C_MspInit+0x88>)
 800599e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a2:	6413      	str	r3, [r2, #64]	; 0x40
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_I2C_MspInit+0x88>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059b0:	bf00      	nop
 80059b2:	3728      	adds	r7, #40	; 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40005400 	.word	0x40005400
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40020400 	.word	0x40020400

080059c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <HAL_RTC_MspInit+0x24>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d102      	bne.n	80059dc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RTC_MspInit+0x28>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40002800 	.word	0x40002800
 80059ec:	42470e3c 	.word	0x42470e3c

080059f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <HAL_TIM_Base_MspInit+0x3c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10d      	bne.n	8005a1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <HAL_TIM_Base_MspInit+0x40>)
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_TIM_Base_MspInit+0x40>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6453      	str	r3, [r2, #68]	; 0x44
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <HAL_TIM_Base_MspInit+0x40>)
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40023800 	.word	0x40023800

08005a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08e      	sub	sp, #56	; 0x38
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a62      	ldr	r2, [pc, #392]	; (8005bdc <HAL_UART_MspInit+0x1a8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d14b      	bne.n	8005aee <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a60      	ldr	r2, [pc, #384]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a60:	f043 0310 	orr.w	r3, r3, #16
 8005a64:	6453      	str	r3, [r2, #68]	; 0x44
 8005a66:	4b5e      	ldr	r3, [pc, #376]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	623b      	str	r3, [r7, #32]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	4b5a      	ldr	r3, [pc, #360]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	4a59      	ldr	r2, [pc, #356]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6313      	str	r3, [r2, #48]	; 0x30
 8005a82:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a52      	ldr	r2, [pc, #328]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b50      	ldr	r3, [pc, #320]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005abc:	2307      	movs	r3, #7
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4847      	ldr	r0, [pc, #284]	; (8005be4 <HAL_UART_MspInit+0x1b0>)
 8005ac8:	f7fb fb48 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005acc:	2308      	movs	r3, #8
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005adc:	2307      	movs	r3, #7
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4840      	ldr	r0, [pc, #256]	; (8005be8 <HAL_UART_MspInit+0x1b4>)
 8005ae8:	f7fb fb38 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005aec:	e072      	b.n	8005bd4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a3e      	ldr	r2, [pc, #248]	; (8005bec <HAL_UART_MspInit+0x1b8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d134      	bne.n	8005b62 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	6413      	str	r3, [r2, #64]	; 0x40
 8005b08:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	4a30      	ldr	r2, [pc, #192]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6313      	str	r3, [r2, #48]	; 0x30
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b30:	230c      	movs	r3, #12
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b34:	2302      	movs	r3, #2
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b40:	2307      	movs	r3, #7
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4826      	ldr	r0, [pc, #152]	; (8005be4 <HAL_UART_MspInit+0x1b0>)
 8005b4c:	f7fb fb06 	bl	800115c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	2026      	movs	r0, #38	; 0x26
 8005b56:	f7fb faa8 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b5a:	2026      	movs	r0, #38	; 0x26
 8005b5c:	f7fb fac1 	bl	80010e2 <HAL_NVIC_EnableIRQ>
}
 8005b60:	e038      	b.n	8005bd4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART6)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_UART_MspInit+0x1bc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d133      	bne.n	8005bd4 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b74:	4a1a      	ldr	r2, [pc, #104]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	6313      	str	r3, [r2, #48]	; 0x30
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <HAL_UART_MspInit+0x1ac>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ba4:	23c0      	movs	r3, #192	; 0xc0
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <HAL_UART_MspInit+0x1c0>)
 8005bc0:	f7fb facc 	bl	800115c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2047      	movs	r0, #71	; 0x47
 8005bca:	f7fb fa6e 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005bce:	2047      	movs	r0, #71	; 0x47
 8005bd0:	f7fb fa87 	bl	80010e2 <HAL_NVIC_EnableIRQ>
}
 8005bd4:	bf00      	nop
 8005bd6:	3738      	adds	r7, #56	; 0x38
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40023800 	.word	0x40023800
 8005be4:	40020000 	.word	0x40020000
 8005be8:	40020400 	.word	0x40020400
 8005bec:	40004400 	.word	0x40004400
 8005bf0:	40011400 	.word	0x40011400
 8005bf4:	40020800 	.word	0x40020800

08005bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c0a:	e7fe      	b.n	8005c0a <HardFault_Handler+0x4>

08005c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c10:	e7fe      	b.n	8005c10 <MemManage_Handler+0x4>

08005c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c16:	e7fe      	b.n	8005c16 <BusFault_Handler+0x4>

08005c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c1c:	e7fe      	b.n	8005c1c <UsageFault_Handler+0x4>

08005c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c4c:	f7fb f910 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c50:	bf00      	nop
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <USART2_IRQHandler+0x10>)
 8005c5a:	f7fd ff3f 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200003e4 	.word	0x200003e4

08005c68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005c6c:	4802      	ldr	r0, [pc, #8]	; (8005c78 <USART6_IRQHandler+0x10>)
 8005c6e:	f7fd ff35 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200003a4 	.word	0x200003a4

08005c7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <_sbrk+0x50>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <_sbrk+0x16>
		heap_end = &end;
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <_sbrk+0x50>)
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <_sbrk+0x54>)
 8005c90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005c92:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <_sbrk+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <_sbrk+0x50>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	466a      	mov	r2, sp
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d907      	bls.n	8005cb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005ca6:	f000 f875 	bl	8005d94 <__errno>
 8005caa:	4602      	mov	r2, r0
 8005cac:	230c      	movs	r3, #12
 8005cae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	e006      	b.n	8005cc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <_sbrk+0x50>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4a03      	ldr	r2, [pc, #12]	; (8005ccc <_sbrk+0x50>)
 8005cc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000208 	.word	0x20000208
 8005cd0:	20000430 	.word	0x20000430

08005cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cd8:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <SystemInit+0x60>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	4a15      	ldr	r2, [pc, #84]	; (8005d34 <SystemInit+0x60>)
 8005ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <SystemInit+0x64>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <SystemInit+0x64>)
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005cf4:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <SystemInit+0x64>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <SystemInit+0x64>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <SystemInit+0x64>)
 8005d00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <SystemInit+0x64>)
 8005d0c:	4a0b      	ldr	r2, [pc, #44]	; (8005d3c <SystemInit+0x68>)
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <SystemInit+0x64>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <SystemInit+0x64>)
 8005d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <SystemInit+0x64>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <SystemInit+0x60>)
 8005d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d28:	609a      	str	r2, [r3, #8]
#endif
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	e000ed00 	.word	0xe000ed00
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	24003010 	.word	0x24003010

08005d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d46:	e003      	b.n	8005d50 <LoopCopyDataInit>

08005d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d4e:	3104      	adds	r1, #4

08005d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d50:	480b      	ldr	r0, [pc, #44]	; (8005d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d58:	d3f6      	bcc.n	8005d48 <CopyDataInit>
  ldr  r2, =_sbss
 8005d5a:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d5c:	e002      	b.n	8005d64 <LoopFillZerobss>

08005d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d60:	f842 3b04 	str.w	r3, [r2], #4

08005d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d68:	d3f9      	bcc.n	8005d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d6a:	f7ff ffb3 	bl	8005cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d6e:	f000 f817 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d72:	f7fe fe8f 	bl	8004a94 <main>
  bx  lr    
 8005d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005d7c:	08007254 	.word	0x08007254
  ldr  r0, =_sdata
 8005d80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d84:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005d88:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005d8c:	20000430 	.word	0x20000430

08005d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d90:	e7fe      	b.n	8005d90 <ADC_IRQHandler>
	...

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4e0d      	ldr	r6, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1ba4      	subs	r4, r4, r6
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2500      	movs	r5, #0
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4e0b      	ldr	r6, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f001 f90c 	bl	8006fd0 <_init>
 8005db8:	1ba4      	subs	r4, r4, r6
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2500      	movs	r5, #0
 8005dbe:	42a5      	cmp	r5, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc8:	4798      	blx	r3
 8005dca:	3501      	adds	r5, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd2:	4798      	blx	r3
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	0800724c 	.word	0x0800724c
 8005ddc:	0800724c 	.word	0x0800724c
 8005de0:	0800724c 	.word	0x0800724c
 8005de4:	08007250 	.word	0x08007250

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <siprintf>:
 8005df8:	b40e      	push	{r1, r2, r3}
 8005dfa:	b500      	push	{lr}
 8005dfc:	b09c      	sub	sp, #112	; 0x70
 8005dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005e00:	9002      	str	r0, [sp, #8]
 8005e02:	9006      	str	r0, [sp, #24]
 8005e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e08:	4809      	ldr	r0, [pc, #36]	; (8005e30 <siprintf+0x38>)
 8005e0a:	9107      	str	r1, [sp, #28]
 8005e0c:	9104      	str	r1, [sp, #16]
 8005e0e:	4909      	ldr	r1, [pc, #36]	; (8005e34 <siprintf+0x3c>)
 8005e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e14:	9105      	str	r1, [sp, #20]
 8005e16:	6800      	ldr	r0, [r0, #0]
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	a902      	add	r1, sp, #8
 8005e1c:	f000 f892 	bl	8005f44 <_svfiprintf_r>
 8005e20:	9b02      	ldr	r3, [sp, #8]
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	b01c      	add	sp, #112	; 0x70
 8005e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e2c:	b003      	add	sp, #12
 8005e2e:	4770      	bx	lr
 8005e30:	2000000c 	.word	0x2000000c
 8005e34:	ffff0208 	.word	0xffff0208

08005e38 <siscanf>:
 8005e38:	b40e      	push	{r1, r2, r3}
 8005e3a:	b530      	push	{r4, r5, lr}
 8005e3c:	b09c      	sub	sp, #112	; 0x70
 8005e3e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005e40:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005e44:	f854 5b04 	ldr.w	r5, [r4], #4
 8005e48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005e4c:	9002      	str	r0, [sp, #8]
 8005e4e:	9006      	str	r0, [sp, #24]
 8005e50:	f7fa f9c6 	bl	80001e0 <strlen>
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <siscanf+0x4c>)
 8005e56:	9003      	str	r0, [sp, #12]
 8005e58:	9007      	str	r0, [sp, #28]
 8005e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e5c:	480a      	ldr	r0, [pc, #40]	; (8005e88 <siscanf+0x50>)
 8005e5e:	9401      	str	r4, [sp, #4]
 8005e60:	2300      	movs	r3, #0
 8005e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e64:	9314      	str	r3, [sp, #80]	; 0x50
 8005e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e6e:	462a      	mov	r2, r5
 8005e70:	4623      	mov	r3, r4
 8005e72:	a902      	add	r1, sp, #8
 8005e74:	6800      	ldr	r0, [r0, #0]
 8005e76:	f000 f9b7 	bl	80061e8 <__ssvfiscanf_r>
 8005e7a:	b01c      	add	sp, #112	; 0x70
 8005e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e80:	b003      	add	sp, #12
 8005e82:	4770      	bx	lr
 8005e84:	08005e8d 	.word	0x08005e8d
 8005e88:	2000000c 	.word	0x2000000c

08005e8c <__seofread>:
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4770      	bx	lr

08005e90 <__ssputs_r>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	688e      	ldr	r6, [r1, #8]
 8005e96:	429e      	cmp	r6, r3
 8005e98:	4682      	mov	sl, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	4690      	mov	r8, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	d837      	bhi.n	8005f12 <__ssputs_r+0x82>
 8005ea2:	898a      	ldrh	r2, [r1, #12]
 8005ea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ea8:	d031      	beq.n	8005f0e <__ssputs_r+0x7e>
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	6909      	ldr	r1, [r1, #16]
 8005eae:	1a6f      	subs	r7, r5, r1
 8005eb0:	6965      	ldr	r5, [r4, #20]
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ebc:	f109 0301 	add.w	r3, r9, #1
 8005ec0:	443b      	add	r3, r7
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	bf38      	it	cc
 8005ec6:	461d      	movcc	r5, r3
 8005ec8:	0553      	lsls	r3, r2, #21
 8005eca:	d530      	bpl.n	8005f2e <__ssputs_r+0x9e>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f000 ffd7 	bl	8006e80 <_malloc_r>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	b950      	cbnz	r0, 8005eec <__ssputs_r+0x5c>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	f8ca 3000 	str.w	r3, [sl]
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eec:	463a      	mov	r2, r7
 8005eee:	6921      	ldr	r1, [r4, #16]
 8005ef0:	f000 ff54 	bl	8006d9c <memcpy>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	6126      	str	r6, [r4, #16]
 8005f02:	6165      	str	r5, [r4, #20]
 8005f04:	443e      	add	r6, r7
 8005f06:	1bed      	subs	r5, r5, r7
 8005f08:	6026      	str	r6, [r4, #0]
 8005f0a:	60a5      	str	r5, [r4, #8]
 8005f0c:	464e      	mov	r6, r9
 8005f0e:	454e      	cmp	r6, r9
 8005f10:	d900      	bls.n	8005f14 <__ssputs_r+0x84>
 8005f12:	464e      	mov	r6, r9
 8005f14:	4632      	mov	r2, r6
 8005f16:	4641      	mov	r1, r8
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	f000 ff4a 	bl	8006db2 <memmove>
 8005f1e:	68a3      	ldr	r3, [r4, #8]
 8005f20:	1b9b      	subs	r3, r3, r6
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	441e      	add	r6, r3
 8005f28:	6026      	str	r6, [r4, #0]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7dc      	b.n	8005ee8 <__ssputs_r+0x58>
 8005f2e:	462a      	mov	r2, r5
 8005f30:	f001 f800 	bl	8006f34 <_realloc_r>
 8005f34:	4606      	mov	r6, r0
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d1e2      	bne.n	8005f00 <__ssputs_r+0x70>
 8005f3a:	6921      	ldr	r1, [r4, #16]
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	f000 ff51 	bl	8006de4 <_free_r>
 8005f42:	e7c8      	b.n	8005ed6 <__ssputs_r+0x46>

08005f44 <_svfiprintf_r>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	461d      	mov	r5, r3
 8005f4a:	898b      	ldrh	r3, [r1, #12]
 8005f4c:	061f      	lsls	r7, r3, #24
 8005f4e:	b09d      	sub	sp, #116	; 0x74
 8005f50:	4680      	mov	r8, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	4616      	mov	r6, r2
 8005f56:	d50f      	bpl.n	8005f78 <_svfiprintf_r+0x34>
 8005f58:	690b      	ldr	r3, [r1, #16]
 8005f5a:	b96b      	cbnz	r3, 8005f78 <_svfiprintf_r+0x34>
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	f000 ff8f 	bl	8006e80 <_malloc_r>
 8005f62:	6020      	str	r0, [r4, #0]
 8005f64:	6120      	str	r0, [r4, #16]
 8005f66:	b928      	cbnz	r0, 8005f74 <_svfiprintf_r+0x30>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	f8c8 3000 	str.w	r3, [r8]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e0c8      	b.n	8006106 <_svfiprintf_r+0x1c2>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	6163      	str	r3, [r4, #20]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f82:	2330      	movs	r3, #48	; 0x30
 8005f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f88:	9503      	str	r5, [sp, #12]
 8005f8a:	f04f 0b01 	mov.w	fp, #1
 8005f8e:	4637      	mov	r7, r6
 8005f90:	463d      	mov	r5, r7
 8005f92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f96:	b10b      	cbz	r3, 8005f9c <_svfiprintf_r+0x58>
 8005f98:	2b25      	cmp	r3, #37	; 0x25
 8005f9a:	d13e      	bne.n	800601a <_svfiprintf_r+0xd6>
 8005f9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fa0:	d00b      	beq.n	8005fba <_svfiprintf_r+0x76>
 8005fa2:	4653      	mov	r3, sl
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f7ff ff71 	bl	8005e90 <__ssputs_r>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f000 80a4 	beq.w	80060fc <_svfiprintf_r+0x1b8>
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	4453      	add	r3, sl
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	783b      	ldrb	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 809d 	beq.w	80060fc <_svfiprintf_r+0x1b8>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005fd6:	462f      	mov	r7, r5
 8005fd8:	2205      	movs	r2, #5
 8005fda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005fde:	4850      	ldr	r0, [pc, #320]	; (8006120 <_svfiprintf_r+0x1dc>)
 8005fe0:	f7fa f906 	bl	80001f0 <memchr>
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	b9d0      	cbnz	r0, 800601e <_svfiprintf_r+0xda>
 8005fe8:	06d9      	lsls	r1, r3, #27
 8005fea:	bf44      	itt	mi
 8005fec:	2220      	movmi	r2, #32
 8005fee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ff2:	071a      	lsls	r2, r3, #28
 8005ff4:	bf44      	itt	mi
 8005ff6:	222b      	movmi	r2, #43	; 0x2b
 8005ff8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ffc:	782a      	ldrb	r2, [r5, #0]
 8005ffe:	2a2a      	cmp	r2, #42	; 0x2a
 8006000:	d015      	beq.n	800602e <_svfiprintf_r+0xea>
 8006002:	9a07      	ldr	r2, [sp, #28]
 8006004:	462f      	mov	r7, r5
 8006006:	2000      	movs	r0, #0
 8006008:	250a      	movs	r5, #10
 800600a:	4639      	mov	r1, r7
 800600c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006010:	3b30      	subs	r3, #48	; 0x30
 8006012:	2b09      	cmp	r3, #9
 8006014:	d94d      	bls.n	80060b2 <_svfiprintf_r+0x16e>
 8006016:	b1b8      	cbz	r0, 8006048 <_svfiprintf_r+0x104>
 8006018:	e00f      	b.n	800603a <_svfiprintf_r+0xf6>
 800601a:	462f      	mov	r7, r5
 800601c:	e7b8      	b.n	8005f90 <_svfiprintf_r+0x4c>
 800601e:	4a40      	ldr	r2, [pc, #256]	; (8006120 <_svfiprintf_r+0x1dc>)
 8006020:	1a80      	subs	r0, r0, r2
 8006022:	fa0b f000 	lsl.w	r0, fp, r0
 8006026:	4318      	orrs	r0, r3
 8006028:	9004      	str	r0, [sp, #16]
 800602a:	463d      	mov	r5, r7
 800602c:	e7d3      	b.n	8005fd6 <_svfiprintf_r+0x92>
 800602e:	9a03      	ldr	r2, [sp, #12]
 8006030:	1d11      	adds	r1, r2, #4
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	9103      	str	r1, [sp, #12]
 8006036:	2a00      	cmp	r2, #0
 8006038:	db01      	blt.n	800603e <_svfiprintf_r+0xfa>
 800603a:	9207      	str	r2, [sp, #28]
 800603c:	e004      	b.n	8006048 <_svfiprintf_r+0x104>
 800603e:	4252      	negs	r2, r2
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	9207      	str	r2, [sp, #28]
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	783b      	ldrb	r3, [r7, #0]
 800604a:	2b2e      	cmp	r3, #46	; 0x2e
 800604c:	d10c      	bne.n	8006068 <_svfiprintf_r+0x124>
 800604e:	787b      	ldrb	r3, [r7, #1]
 8006050:	2b2a      	cmp	r3, #42	; 0x2a
 8006052:	d133      	bne.n	80060bc <_svfiprintf_r+0x178>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfb8      	it	lt
 8006060:	f04f 33ff 	movlt.w	r3, #4294967295
 8006064:	3702      	adds	r7, #2
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	4d2e      	ldr	r5, [pc, #184]	; (8006124 <_svfiprintf_r+0x1e0>)
 800606a:	7839      	ldrb	r1, [r7, #0]
 800606c:	2203      	movs	r2, #3
 800606e:	4628      	mov	r0, r5
 8006070:	f7fa f8be 	bl	80001f0 <memchr>
 8006074:	b138      	cbz	r0, 8006086 <_svfiprintf_r+0x142>
 8006076:	2340      	movs	r3, #64	; 0x40
 8006078:	1b40      	subs	r0, r0, r5
 800607a:	fa03 f000 	lsl.w	r0, r3, r0
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	4303      	orrs	r3, r0
 8006082:	3701      	adds	r7, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	7839      	ldrb	r1, [r7, #0]
 8006088:	4827      	ldr	r0, [pc, #156]	; (8006128 <_svfiprintf_r+0x1e4>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800608e:	2206      	movs	r2, #6
 8006090:	1c7e      	adds	r6, r7, #1
 8006092:	f7fa f8ad 	bl	80001f0 <memchr>
 8006096:	2800      	cmp	r0, #0
 8006098:	d038      	beq.n	800610c <_svfiprintf_r+0x1c8>
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <_svfiprintf_r+0x1e8>)
 800609c:	bb13      	cbnz	r3, 80060e4 <_svfiprintf_r+0x1a0>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	3307      	adds	r3, #7
 80060a2:	f023 0307 	bic.w	r3, r3, #7
 80060a6:	3308      	adds	r3, #8
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ac:	444b      	add	r3, r9
 80060ae:	9309      	str	r3, [sp, #36]	; 0x24
 80060b0:	e76d      	b.n	8005f8e <_svfiprintf_r+0x4a>
 80060b2:	fb05 3202 	mla	r2, r5, r2, r3
 80060b6:	2001      	movs	r0, #1
 80060b8:	460f      	mov	r7, r1
 80060ba:	e7a6      	b.n	800600a <_svfiprintf_r+0xc6>
 80060bc:	2300      	movs	r3, #0
 80060be:	3701      	adds	r7, #1
 80060c0:	9305      	str	r3, [sp, #20]
 80060c2:	4619      	mov	r1, r3
 80060c4:	250a      	movs	r5, #10
 80060c6:	4638      	mov	r0, r7
 80060c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060cc:	3a30      	subs	r2, #48	; 0x30
 80060ce:	2a09      	cmp	r2, #9
 80060d0:	d903      	bls.n	80060da <_svfiprintf_r+0x196>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c8      	beq.n	8006068 <_svfiprintf_r+0x124>
 80060d6:	9105      	str	r1, [sp, #20]
 80060d8:	e7c6      	b.n	8006068 <_svfiprintf_r+0x124>
 80060da:	fb05 2101 	mla	r1, r5, r1, r2
 80060de:	2301      	movs	r3, #1
 80060e0:	4607      	mov	r7, r0
 80060e2:	e7f0      	b.n	80060c6 <_svfiprintf_r+0x182>
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4622      	mov	r2, r4
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <_svfiprintf_r+0x1ec>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4640      	mov	r0, r8
 80060f0:	f3af 8000 	nop.w
 80060f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060f8:	4681      	mov	r9, r0
 80060fa:	d1d6      	bne.n	80060aa <_svfiprintf_r+0x166>
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	065b      	lsls	r3, r3, #25
 8006100:	f53f af35 	bmi.w	8005f6e <_svfiprintf_r+0x2a>
 8006104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006106:	b01d      	add	sp, #116	; 0x74
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4622      	mov	r2, r4
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <_svfiprintf_r+0x1ec>)
 8006114:	a904      	add	r1, sp, #16
 8006116:	4640      	mov	r0, r8
 8006118:	f000 fa2c 	bl	8006574 <_printf_i>
 800611c:	e7ea      	b.n	80060f4 <_svfiprintf_r+0x1b0>
 800611e:	bf00      	nop
 8006120:	08007088 	.word	0x08007088
 8006124:	0800708e 	.word	0x0800708e
 8006128:	08007092 	.word	0x08007092
 800612c:	00000000 	.word	0x00000000
 8006130:	08005e91 	.word	0x08005e91

08006134 <_sungetc_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	1c4b      	adds	r3, r1, #1
 8006138:	4614      	mov	r4, r2
 800613a:	d103      	bne.n	8006144 <_sungetc_r+0x10>
 800613c:	f04f 35ff 	mov.w	r5, #4294967295
 8006140:	4628      	mov	r0, r5
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	8993      	ldrh	r3, [r2, #12]
 8006146:	f023 0320 	bic.w	r3, r3, #32
 800614a:	8193      	strh	r3, [r2, #12]
 800614c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800614e:	6852      	ldr	r2, [r2, #4]
 8006150:	b2cd      	uxtb	r5, r1
 8006152:	b18b      	cbz	r3, 8006178 <_sungetc_r+0x44>
 8006154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006156:	4293      	cmp	r3, r2
 8006158:	dd08      	ble.n	800616c <_sungetc_r+0x38>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	1e5a      	subs	r2, r3, #1
 800615e:	6022      	str	r2, [r4, #0]
 8006160:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	e7e9      	b.n	8006140 <_sungetc_r+0xc>
 800616c:	4621      	mov	r1, r4
 800616e:	f000 fdb7 	bl	8006ce0 <__submore>
 8006172:	2800      	cmp	r0, #0
 8006174:	d0f1      	beq.n	800615a <_sungetc_r+0x26>
 8006176:	e7e1      	b.n	800613c <_sungetc_r+0x8>
 8006178:	6921      	ldr	r1, [r4, #16]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	b151      	cbz	r1, 8006194 <_sungetc_r+0x60>
 800617e:	4299      	cmp	r1, r3
 8006180:	d208      	bcs.n	8006194 <_sungetc_r+0x60>
 8006182:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006186:	42a9      	cmp	r1, r5
 8006188:	d104      	bne.n	8006194 <_sungetc_r+0x60>
 800618a:	3b01      	subs	r3, #1
 800618c:	3201      	adds	r2, #1
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	6062      	str	r2, [r4, #4]
 8006192:	e7d5      	b.n	8006140 <_sungetc_r+0xc>
 8006194:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800619c:	6363      	str	r3, [r4, #52]	; 0x34
 800619e:	2303      	movs	r3, #3
 80061a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80061a2:	4623      	mov	r3, r4
 80061a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7dc      	b.n	8006168 <_sungetc_r+0x34>

080061ae <__ssrefill_r>:
 80061ae:	b510      	push	{r4, lr}
 80061b0:	460c      	mov	r4, r1
 80061b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80061b4:	b169      	cbz	r1, 80061d2 <__ssrefill_r+0x24>
 80061b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d001      	beq.n	80061c2 <__ssrefill_r+0x14>
 80061be:	f000 fe11 	bl	8006de4 <_free_r>
 80061c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	2000      	movs	r0, #0
 80061c8:	6360      	str	r0, [r4, #52]	; 0x34
 80061ca:	b113      	cbz	r3, 80061d2 <__ssrefill_r+0x24>
 80061cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	e7f3      	b.n	80061d0 <__ssrefill_r+0x22>

080061e8 <__ssvfiscanf_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80061f0:	460c      	mov	r4, r1
 80061f2:	2100      	movs	r1, #0
 80061f4:	9144      	str	r1, [sp, #272]	; 0x110
 80061f6:	9145      	str	r1, [sp, #276]	; 0x114
 80061f8:	499f      	ldr	r1, [pc, #636]	; (8006478 <__ssvfiscanf_r+0x290>)
 80061fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80061fc:	f10d 0804 	add.w	r8, sp, #4
 8006200:	499e      	ldr	r1, [pc, #632]	; (800647c <__ssvfiscanf_r+0x294>)
 8006202:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006480 <__ssvfiscanf_r+0x298>
 8006206:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800620a:	4606      	mov	r6, r0
 800620c:	4692      	mov	sl, r2
 800620e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	270a      	movs	r7, #10
 8006214:	f89a 3000 	ldrb.w	r3, [sl]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 812a 	beq.w	8006472 <__ssvfiscanf_r+0x28a>
 800621e:	4655      	mov	r5, sl
 8006220:	f000 fd9c 	bl	8006d5c <__locale_ctype_ptr>
 8006224:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006228:	4458      	add	r0, fp
 800622a:	7843      	ldrb	r3, [r0, #1]
 800622c:	f013 0308 	ands.w	r3, r3, #8
 8006230:	d01c      	beq.n	800626c <__ssvfiscanf_r+0x84>
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	dd12      	ble.n	800625e <__ssvfiscanf_r+0x76>
 8006238:	f000 fd90 	bl	8006d5c <__locale_ctype_ptr>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	4410      	add	r0, r2
 8006242:	7842      	ldrb	r2, [r0, #1]
 8006244:	0712      	lsls	r2, r2, #28
 8006246:	d401      	bmi.n	800624c <__ssvfiscanf_r+0x64>
 8006248:	46aa      	mov	sl, r5
 800624a:	e7e3      	b.n	8006214 <__ssvfiscanf_r+0x2c>
 800624c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800624e:	3201      	adds	r2, #1
 8006250:	9245      	str	r2, [sp, #276]	; 0x114
 8006252:	6862      	ldr	r2, [r4, #4]
 8006254:	3301      	adds	r3, #1
 8006256:	3a01      	subs	r2, #1
 8006258:	6062      	str	r2, [r4, #4]
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	e7e9      	b.n	8006232 <__ssvfiscanf_r+0x4a>
 800625e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006260:	4621      	mov	r1, r4
 8006262:	4630      	mov	r0, r6
 8006264:	4798      	blx	r3
 8006266:	2800      	cmp	r0, #0
 8006268:	d0e6      	beq.n	8006238 <__ssvfiscanf_r+0x50>
 800626a:	e7ed      	b.n	8006248 <__ssvfiscanf_r+0x60>
 800626c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006270:	f040 8082 	bne.w	8006378 <__ssvfiscanf_r+0x190>
 8006274:	9343      	str	r3, [sp, #268]	; 0x10c
 8006276:	9341      	str	r3, [sp, #260]	; 0x104
 8006278:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800627c:	2b2a      	cmp	r3, #42	; 0x2a
 800627e:	d103      	bne.n	8006288 <__ssvfiscanf_r+0xa0>
 8006280:	2310      	movs	r3, #16
 8006282:	9341      	str	r3, [sp, #260]	; 0x104
 8006284:	f10a 0502 	add.w	r5, sl, #2
 8006288:	46aa      	mov	sl, r5
 800628a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800628e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006292:	2a09      	cmp	r2, #9
 8006294:	d922      	bls.n	80062dc <__ssvfiscanf_r+0xf4>
 8006296:	2203      	movs	r2, #3
 8006298:	4879      	ldr	r0, [pc, #484]	; (8006480 <__ssvfiscanf_r+0x298>)
 800629a:	f7f9 ffa9 	bl	80001f0 <memchr>
 800629e:	b138      	cbz	r0, 80062b0 <__ssvfiscanf_r+0xc8>
 80062a0:	eba0 0309 	sub.w	r3, r0, r9
 80062a4:	2001      	movs	r0, #1
 80062a6:	4098      	lsls	r0, r3
 80062a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80062aa:	4318      	orrs	r0, r3
 80062ac:	9041      	str	r0, [sp, #260]	; 0x104
 80062ae:	46aa      	mov	sl, r5
 80062b0:	f89a 3000 	ldrb.w	r3, [sl]
 80062b4:	2b67      	cmp	r3, #103	; 0x67
 80062b6:	f10a 0501 	add.w	r5, sl, #1
 80062ba:	d82b      	bhi.n	8006314 <__ssvfiscanf_r+0x12c>
 80062bc:	2b65      	cmp	r3, #101	; 0x65
 80062be:	f080 809f 	bcs.w	8006400 <__ssvfiscanf_r+0x218>
 80062c2:	2b47      	cmp	r3, #71	; 0x47
 80062c4:	d810      	bhi.n	80062e8 <__ssvfiscanf_r+0x100>
 80062c6:	2b45      	cmp	r3, #69	; 0x45
 80062c8:	f080 809a 	bcs.w	8006400 <__ssvfiscanf_r+0x218>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d06c      	beq.n	80063aa <__ssvfiscanf_r+0x1c2>
 80062d0:	2b25      	cmp	r3, #37	; 0x25
 80062d2:	d051      	beq.n	8006378 <__ssvfiscanf_r+0x190>
 80062d4:	2303      	movs	r3, #3
 80062d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80062d8:	9742      	str	r7, [sp, #264]	; 0x108
 80062da:	e027      	b.n	800632c <__ssvfiscanf_r+0x144>
 80062dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80062de:	fb07 1303 	mla	r3, r7, r3, r1
 80062e2:	3b30      	subs	r3, #48	; 0x30
 80062e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80062e6:	e7cf      	b.n	8006288 <__ssvfiscanf_r+0xa0>
 80062e8:	2b5b      	cmp	r3, #91	; 0x5b
 80062ea:	d06a      	beq.n	80063c2 <__ssvfiscanf_r+0x1da>
 80062ec:	d80c      	bhi.n	8006308 <__ssvfiscanf_r+0x120>
 80062ee:	2b58      	cmp	r3, #88	; 0x58
 80062f0:	d1f0      	bne.n	80062d4 <__ssvfiscanf_r+0xec>
 80062f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80062f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f8:	9241      	str	r2, [sp, #260]	; 0x104
 80062fa:	2210      	movs	r2, #16
 80062fc:	9242      	str	r2, [sp, #264]	; 0x108
 80062fe:	2b6e      	cmp	r3, #110	; 0x6e
 8006300:	bf8c      	ite	hi
 8006302:	2304      	movhi	r3, #4
 8006304:	2303      	movls	r3, #3
 8006306:	e010      	b.n	800632a <__ssvfiscanf_r+0x142>
 8006308:	2b63      	cmp	r3, #99	; 0x63
 800630a:	d065      	beq.n	80063d8 <__ssvfiscanf_r+0x1f0>
 800630c:	2b64      	cmp	r3, #100	; 0x64
 800630e:	d1e1      	bne.n	80062d4 <__ssvfiscanf_r+0xec>
 8006310:	9742      	str	r7, [sp, #264]	; 0x108
 8006312:	e7f4      	b.n	80062fe <__ssvfiscanf_r+0x116>
 8006314:	2b70      	cmp	r3, #112	; 0x70
 8006316:	d04b      	beq.n	80063b0 <__ssvfiscanf_r+0x1c8>
 8006318:	d826      	bhi.n	8006368 <__ssvfiscanf_r+0x180>
 800631a:	2b6e      	cmp	r3, #110	; 0x6e
 800631c:	d062      	beq.n	80063e4 <__ssvfiscanf_r+0x1fc>
 800631e:	d84c      	bhi.n	80063ba <__ssvfiscanf_r+0x1d2>
 8006320:	2b69      	cmp	r3, #105	; 0x69
 8006322:	d1d7      	bne.n	80062d4 <__ssvfiscanf_r+0xec>
 8006324:	2300      	movs	r3, #0
 8006326:	9342      	str	r3, [sp, #264]	; 0x108
 8006328:	2303      	movs	r3, #3
 800632a:	9347      	str	r3, [sp, #284]	; 0x11c
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd68      	ble.n	8006404 <__ssvfiscanf_r+0x21c>
 8006332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006334:	0659      	lsls	r1, r3, #25
 8006336:	d407      	bmi.n	8006348 <__ssvfiscanf_r+0x160>
 8006338:	f000 fd10 	bl	8006d5c <__locale_ctype_ptr>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	781a      	ldrb	r2, [r3, #0]
 8006340:	4410      	add	r0, r2
 8006342:	7842      	ldrb	r2, [r0, #1]
 8006344:	0712      	lsls	r2, r2, #28
 8006346:	d464      	bmi.n	8006412 <__ssvfiscanf_r+0x22a>
 8006348:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800634a:	2b02      	cmp	r3, #2
 800634c:	dc73      	bgt.n	8006436 <__ssvfiscanf_r+0x24e>
 800634e:	466b      	mov	r3, sp
 8006350:	4622      	mov	r2, r4
 8006352:	a941      	add	r1, sp, #260	; 0x104
 8006354:	4630      	mov	r0, r6
 8006356:	f000 fa1f 	bl	8006798 <_scanf_chars>
 800635a:	2801      	cmp	r0, #1
 800635c:	f000 8089 	beq.w	8006472 <__ssvfiscanf_r+0x28a>
 8006360:	2802      	cmp	r0, #2
 8006362:	f47f af71 	bne.w	8006248 <__ssvfiscanf_r+0x60>
 8006366:	e01d      	b.n	80063a4 <__ssvfiscanf_r+0x1bc>
 8006368:	2b75      	cmp	r3, #117	; 0x75
 800636a:	d0d1      	beq.n	8006310 <__ssvfiscanf_r+0x128>
 800636c:	2b78      	cmp	r3, #120	; 0x78
 800636e:	d0c0      	beq.n	80062f2 <__ssvfiscanf_r+0x10a>
 8006370:	2b73      	cmp	r3, #115	; 0x73
 8006372:	d1af      	bne.n	80062d4 <__ssvfiscanf_r+0xec>
 8006374:	2302      	movs	r3, #2
 8006376:	e7d8      	b.n	800632a <__ssvfiscanf_r+0x142>
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	dd0c      	ble.n	8006398 <__ssvfiscanf_r+0x1b0>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	781a      	ldrb	r2, [r3, #0]
 8006382:	455a      	cmp	r2, fp
 8006384:	d175      	bne.n	8006472 <__ssvfiscanf_r+0x28a>
 8006386:	3301      	adds	r3, #1
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800638e:	3a01      	subs	r2, #1
 8006390:	3301      	adds	r3, #1
 8006392:	6062      	str	r2, [r4, #4]
 8006394:	9345      	str	r3, [sp, #276]	; 0x114
 8006396:	e757      	b.n	8006248 <__ssvfiscanf_r+0x60>
 8006398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800639a:	4621      	mov	r1, r4
 800639c:	4630      	mov	r0, r6
 800639e:	4798      	blx	r3
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d0ec      	beq.n	800637e <__ssvfiscanf_r+0x196>
 80063a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d159      	bne.n	800645e <__ssvfiscanf_r+0x276>
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295
 80063ae:	e05c      	b.n	800646a <__ssvfiscanf_r+0x282>
 80063b0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80063b2:	f042 0220 	orr.w	r2, r2, #32
 80063b6:	9241      	str	r2, [sp, #260]	; 0x104
 80063b8:	e79b      	b.n	80062f2 <__ssvfiscanf_r+0x10a>
 80063ba:	2308      	movs	r3, #8
 80063bc:	9342      	str	r3, [sp, #264]	; 0x108
 80063be:	2304      	movs	r3, #4
 80063c0:	e7b3      	b.n	800632a <__ssvfiscanf_r+0x142>
 80063c2:	4629      	mov	r1, r5
 80063c4:	4640      	mov	r0, r8
 80063c6:	f000 fb3f 	bl	8006a48 <__sccl>
 80063ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80063cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d0:	9341      	str	r3, [sp, #260]	; 0x104
 80063d2:	4605      	mov	r5, r0
 80063d4:	2301      	movs	r3, #1
 80063d6:	e7a8      	b.n	800632a <__ssvfiscanf_r+0x142>
 80063d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80063da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063de:	9341      	str	r3, [sp, #260]	; 0x104
 80063e0:	2300      	movs	r3, #0
 80063e2:	e7a2      	b.n	800632a <__ssvfiscanf_r+0x142>
 80063e4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80063e6:	06c3      	lsls	r3, r0, #27
 80063e8:	f53f af2e 	bmi.w	8006248 <__ssvfiscanf_r+0x60>
 80063ec:	9b00      	ldr	r3, [sp, #0]
 80063ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80063f0:	1d19      	adds	r1, r3, #4
 80063f2:	9100      	str	r1, [sp, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	07c0      	lsls	r0, r0, #31
 80063f8:	bf4c      	ite	mi
 80063fa:	801a      	strhmi	r2, [r3, #0]
 80063fc:	601a      	strpl	r2, [r3, #0]
 80063fe:	e723      	b.n	8006248 <__ssvfiscanf_r+0x60>
 8006400:	2305      	movs	r3, #5
 8006402:	e792      	b.n	800632a <__ssvfiscanf_r+0x142>
 8006404:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006406:	4621      	mov	r1, r4
 8006408:	4630      	mov	r0, r6
 800640a:	4798      	blx	r3
 800640c:	2800      	cmp	r0, #0
 800640e:	d090      	beq.n	8006332 <__ssvfiscanf_r+0x14a>
 8006410:	e7c8      	b.n	80063a4 <__ssvfiscanf_r+0x1bc>
 8006412:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006414:	3201      	adds	r2, #1
 8006416:	9245      	str	r2, [sp, #276]	; 0x114
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	3a01      	subs	r2, #1
 800641c:	2a00      	cmp	r2, #0
 800641e:	6062      	str	r2, [r4, #4]
 8006420:	dd02      	ble.n	8006428 <__ssvfiscanf_r+0x240>
 8006422:	3301      	adds	r3, #1
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	e787      	b.n	8006338 <__ssvfiscanf_r+0x150>
 8006428:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800642a:	4621      	mov	r1, r4
 800642c:	4630      	mov	r0, r6
 800642e:	4798      	blx	r3
 8006430:	2800      	cmp	r0, #0
 8006432:	d081      	beq.n	8006338 <__ssvfiscanf_r+0x150>
 8006434:	e7b6      	b.n	80063a4 <__ssvfiscanf_r+0x1bc>
 8006436:	2b04      	cmp	r3, #4
 8006438:	dc06      	bgt.n	8006448 <__ssvfiscanf_r+0x260>
 800643a:	466b      	mov	r3, sp
 800643c:	4622      	mov	r2, r4
 800643e:	a941      	add	r1, sp, #260	; 0x104
 8006440:	4630      	mov	r0, r6
 8006442:	f000 fa0d 	bl	8006860 <_scanf_i>
 8006446:	e788      	b.n	800635a <__ssvfiscanf_r+0x172>
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <__ssvfiscanf_r+0x29c>)
 800644a:	2b00      	cmp	r3, #0
 800644c:	f43f aefc 	beq.w	8006248 <__ssvfiscanf_r+0x60>
 8006450:	466b      	mov	r3, sp
 8006452:	4622      	mov	r2, r4
 8006454:	a941      	add	r1, sp, #260	; 0x104
 8006456:	4630      	mov	r0, r6
 8006458:	f3af 8000 	nop.w
 800645c:	e77d      	b.n	800635a <__ssvfiscanf_r+0x172>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006464:	bf18      	it	ne
 8006466:	f04f 30ff 	movne.w	r0, #4294967295
 800646a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006472:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006474:	e7f9      	b.n	800646a <__ssvfiscanf_r+0x282>
 8006476:	bf00      	nop
 8006478:	08006135 	.word	0x08006135
 800647c:	080061af 	.word	0x080061af
 8006480:	0800708e 	.word	0x0800708e
 8006484:	00000000 	.word	0x00000000

08006488 <_printf_common>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	4691      	mov	r9, r2
 800648e:	461f      	mov	r7, r3
 8006490:	688a      	ldr	r2, [r1, #8]
 8006492:	690b      	ldr	r3, [r1, #16]
 8006494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006498:	4293      	cmp	r3, r2
 800649a:	bfb8      	it	lt
 800649c:	4613      	movlt	r3, r2
 800649e:	f8c9 3000 	str.w	r3, [r9]
 80064a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a6:	4606      	mov	r6, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	b112      	cbz	r2, 80064b2 <_printf_common+0x2a>
 80064ac:	3301      	adds	r3, #1
 80064ae:	f8c9 3000 	str.w	r3, [r9]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	0699      	lsls	r1, r3, #26
 80064b6:	bf42      	ittt	mi
 80064b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064bc:	3302      	addmi	r3, #2
 80064be:	f8c9 3000 	strmi.w	r3, [r9]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	f015 0506 	ands.w	r5, r5, #6
 80064c8:	d107      	bne.n	80064da <_printf_common+0x52>
 80064ca:	f104 0a19 	add.w	sl, r4, #25
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	f8d9 2000 	ldr.w	r2, [r9]
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	42ab      	cmp	r3, r5
 80064d8:	dc28      	bgt.n	800652c <_printf_common+0xa4>
 80064da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	3300      	adds	r3, #0
 80064e2:	bf18      	it	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	0692      	lsls	r2, r2, #26
 80064e8:	d42d      	bmi.n	8006546 <_printf_common+0xbe>
 80064ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ee:	4639      	mov	r1, r7
 80064f0:	4630      	mov	r0, r6
 80064f2:	47c0      	blx	r8
 80064f4:	3001      	adds	r0, #1
 80064f6:	d020      	beq.n	800653a <_printf_common+0xb2>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	68e5      	ldr	r5, [r4, #12]
 80064fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006500:	f003 0306 	and.w	r3, r3, #6
 8006504:	2b04      	cmp	r3, #4
 8006506:	bf08      	it	eq
 8006508:	1aad      	subeq	r5, r5, r2
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	bf0c      	ite	eq
 8006510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006514:	2500      	movne	r5, #0
 8006516:	4293      	cmp	r3, r2
 8006518:	bfc4      	itt	gt
 800651a:	1a9b      	subgt	r3, r3, r2
 800651c:	18ed      	addgt	r5, r5, r3
 800651e:	f04f 0900 	mov.w	r9, #0
 8006522:	341a      	adds	r4, #26
 8006524:	454d      	cmp	r5, r9
 8006526:	d11a      	bne.n	800655e <_printf_common+0xd6>
 8006528:	2000      	movs	r0, #0
 800652a:	e008      	b.n	800653e <_printf_common+0xb6>
 800652c:	2301      	movs	r3, #1
 800652e:	4652      	mov	r2, sl
 8006530:	4639      	mov	r1, r7
 8006532:	4630      	mov	r0, r6
 8006534:	47c0      	blx	r8
 8006536:	3001      	adds	r0, #1
 8006538:	d103      	bne.n	8006542 <_printf_common+0xba>
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	3501      	adds	r5, #1
 8006544:	e7c3      	b.n	80064ce <_printf_common+0x46>
 8006546:	18e1      	adds	r1, r4, r3
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	2030      	movs	r0, #48	; 0x30
 800654c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006550:	4422      	add	r2, r4
 8006552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800655a:	3302      	adds	r3, #2
 800655c:	e7c5      	b.n	80064ea <_printf_common+0x62>
 800655e:	2301      	movs	r3, #1
 8006560:	4622      	mov	r2, r4
 8006562:	4639      	mov	r1, r7
 8006564:	4630      	mov	r0, r6
 8006566:	47c0      	blx	r8
 8006568:	3001      	adds	r0, #1
 800656a:	d0e6      	beq.n	800653a <_printf_common+0xb2>
 800656c:	f109 0901 	add.w	r9, r9, #1
 8006570:	e7d8      	b.n	8006524 <_printf_common+0x9c>
	...

08006574 <_printf_i>:
 8006574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006578:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800657c:	460c      	mov	r4, r1
 800657e:	7e09      	ldrb	r1, [r1, #24]
 8006580:	b085      	sub	sp, #20
 8006582:	296e      	cmp	r1, #110	; 0x6e
 8006584:	4617      	mov	r7, r2
 8006586:	4606      	mov	r6, r0
 8006588:	4698      	mov	r8, r3
 800658a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800658c:	f000 80b3 	beq.w	80066f6 <_printf_i+0x182>
 8006590:	d822      	bhi.n	80065d8 <_printf_i+0x64>
 8006592:	2963      	cmp	r1, #99	; 0x63
 8006594:	d036      	beq.n	8006604 <_printf_i+0x90>
 8006596:	d80a      	bhi.n	80065ae <_printf_i+0x3a>
 8006598:	2900      	cmp	r1, #0
 800659a:	f000 80b9 	beq.w	8006710 <_printf_i+0x19c>
 800659e:	2958      	cmp	r1, #88	; 0x58
 80065a0:	f000 8083 	beq.w	80066aa <_printf_i+0x136>
 80065a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065ac:	e032      	b.n	8006614 <_printf_i+0xa0>
 80065ae:	2964      	cmp	r1, #100	; 0x64
 80065b0:	d001      	beq.n	80065b6 <_printf_i+0x42>
 80065b2:	2969      	cmp	r1, #105	; 0x69
 80065b4:	d1f6      	bne.n	80065a4 <_printf_i+0x30>
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	0605      	lsls	r5, r0, #24
 80065bc:	f103 0104 	add.w	r1, r3, #4
 80065c0:	d52a      	bpl.n	8006618 <_printf_i+0xa4>
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6011      	str	r1, [r2, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da03      	bge.n	80065d2 <_printf_i+0x5e>
 80065ca:	222d      	movs	r2, #45	; 0x2d
 80065cc:	425b      	negs	r3, r3
 80065ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065d2:	486f      	ldr	r0, [pc, #444]	; (8006790 <_printf_i+0x21c>)
 80065d4:	220a      	movs	r2, #10
 80065d6:	e039      	b.n	800664c <_printf_i+0xd8>
 80065d8:	2973      	cmp	r1, #115	; 0x73
 80065da:	f000 809d 	beq.w	8006718 <_printf_i+0x1a4>
 80065de:	d808      	bhi.n	80065f2 <_printf_i+0x7e>
 80065e0:	296f      	cmp	r1, #111	; 0x6f
 80065e2:	d020      	beq.n	8006626 <_printf_i+0xb2>
 80065e4:	2970      	cmp	r1, #112	; 0x70
 80065e6:	d1dd      	bne.n	80065a4 <_printf_i+0x30>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f043 0320 	orr.w	r3, r3, #32
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	e003      	b.n	80065fa <_printf_i+0x86>
 80065f2:	2975      	cmp	r1, #117	; 0x75
 80065f4:	d017      	beq.n	8006626 <_printf_i+0xb2>
 80065f6:	2978      	cmp	r1, #120	; 0x78
 80065f8:	d1d4      	bne.n	80065a4 <_printf_i+0x30>
 80065fa:	2378      	movs	r3, #120	; 0x78
 80065fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006600:	4864      	ldr	r0, [pc, #400]	; (8006794 <_printf_i+0x220>)
 8006602:	e055      	b.n	80066b0 <_printf_i+0x13c>
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	1d19      	adds	r1, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6011      	str	r1, [r2, #0]
 800660c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006614:	2301      	movs	r3, #1
 8006616:	e08c      	b.n	8006732 <_printf_i+0x1be>
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6011      	str	r1, [r2, #0]
 800661c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006620:	bf18      	it	ne
 8006622:	b21b      	sxthne	r3, r3
 8006624:	e7cf      	b.n	80065c6 <_printf_i+0x52>
 8006626:	6813      	ldr	r3, [r2, #0]
 8006628:	6825      	ldr	r5, [r4, #0]
 800662a:	1d18      	adds	r0, r3, #4
 800662c:	6010      	str	r0, [r2, #0]
 800662e:	0628      	lsls	r0, r5, #24
 8006630:	d501      	bpl.n	8006636 <_printf_i+0xc2>
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	e002      	b.n	800663c <_printf_i+0xc8>
 8006636:	0668      	lsls	r0, r5, #25
 8006638:	d5fb      	bpl.n	8006632 <_printf_i+0xbe>
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	4854      	ldr	r0, [pc, #336]	; (8006790 <_printf_i+0x21c>)
 800663e:	296f      	cmp	r1, #111	; 0x6f
 8006640:	bf14      	ite	ne
 8006642:	220a      	movne	r2, #10
 8006644:	2208      	moveq	r2, #8
 8006646:	2100      	movs	r1, #0
 8006648:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800664c:	6865      	ldr	r5, [r4, #4]
 800664e:	60a5      	str	r5, [r4, #8]
 8006650:	2d00      	cmp	r5, #0
 8006652:	f2c0 8095 	blt.w	8006780 <_printf_i+0x20c>
 8006656:	6821      	ldr	r1, [r4, #0]
 8006658:	f021 0104 	bic.w	r1, r1, #4
 800665c:	6021      	str	r1, [r4, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d13d      	bne.n	80066de <_printf_i+0x16a>
 8006662:	2d00      	cmp	r5, #0
 8006664:	f040 808e 	bne.w	8006784 <_printf_i+0x210>
 8006668:	4665      	mov	r5, ip
 800666a:	2a08      	cmp	r2, #8
 800666c:	d10b      	bne.n	8006686 <_printf_i+0x112>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	07db      	lsls	r3, r3, #31
 8006672:	d508      	bpl.n	8006686 <_printf_i+0x112>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	bfde      	ittt	le
 800667c:	2330      	movle	r3, #48	; 0x30
 800667e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006686:	ebac 0305 	sub.w	r3, ip, r5
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	f8cd 8000 	str.w	r8, [sp]
 8006690:	463b      	mov	r3, r7
 8006692:	aa03      	add	r2, sp, #12
 8006694:	4621      	mov	r1, r4
 8006696:	4630      	mov	r0, r6
 8006698:	f7ff fef6 	bl	8006488 <_printf_common>
 800669c:	3001      	adds	r0, #1
 800669e:	d14d      	bne.n	800673c <_printf_i+0x1c8>
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	b005      	add	sp, #20
 80066a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066aa:	4839      	ldr	r0, [pc, #228]	; (8006790 <_printf_i+0x21c>)
 80066ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	1d1d      	adds	r5, r3, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6015      	str	r5, [r2, #0]
 80066ba:	060a      	lsls	r2, r1, #24
 80066bc:	d50b      	bpl.n	80066d6 <_printf_i+0x162>
 80066be:	07ca      	lsls	r2, r1, #31
 80066c0:	bf44      	itt	mi
 80066c2:	f041 0120 	orrmi.w	r1, r1, #32
 80066c6:	6021      	strmi	r1, [r4, #0]
 80066c8:	b91b      	cbnz	r3, 80066d2 <_printf_i+0x15e>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	f022 0220 	bic.w	r2, r2, #32
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	2210      	movs	r2, #16
 80066d4:	e7b7      	b.n	8006646 <_printf_i+0xd2>
 80066d6:	064d      	lsls	r5, r1, #25
 80066d8:	bf48      	it	mi
 80066da:	b29b      	uxthmi	r3, r3
 80066dc:	e7ef      	b.n	80066be <_printf_i+0x14a>
 80066de:	4665      	mov	r5, ip
 80066e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80066e4:	fb02 3311 	mls	r3, r2, r1, r3
 80066e8:	5cc3      	ldrb	r3, [r0, r3]
 80066ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066ee:	460b      	mov	r3, r1
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d1f5      	bne.n	80066e0 <_printf_i+0x16c>
 80066f4:	e7b9      	b.n	800666a <_printf_i+0xf6>
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	6825      	ldr	r5, [r4, #0]
 80066fa:	6961      	ldr	r1, [r4, #20]
 80066fc:	1d18      	adds	r0, r3, #4
 80066fe:	6010      	str	r0, [r2, #0]
 8006700:	0628      	lsls	r0, r5, #24
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	d501      	bpl.n	800670a <_printf_i+0x196>
 8006706:	6019      	str	r1, [r3, #0]
 8006708:	e002      	b.n	8006710 <_printf_i+0x19c>
 800670a:	066a      	lsls	r2, r5, #25
 800670c:	d5fb      	bpl.n	8006706 <_printf_i+0x192>
 800670e:	8019      	strh	r1, [r3, #0]
 8006710:	2300      	movs	r3, #0
 8006712:	6123      	str	r3, [r4, #16]
 8006714:	4665      	mov	r5, ip
 8006716:	e7b9      	b.n	800668c <_printf_i+0x118>
 8006718:	6813      	ldr	r3, [r2, #0]
 800671a:	1d19      	adds	r1, r3, #4
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	681d      	ldr	r5, [r3, #0]
 8006720:	6862      	ldr	r2, [r4, #4]
 8006722:	2100      	movs	r1, #0
 8006724:	4628      	mov	r0, r5
 8006726:	f7f9 fd63 	bl	80001f0 <memchr>
 800672a:	b108      	cbz	r0, 8006730 <_printf_i+0x1bc>
 800672c:	1b40      	subs	r0, r0, r5
 800672e:	6060      	str	r0, [r4, #4]
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	2300      	movs	r3, #0
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673a:	e7a7      	b.n	800668c <_printf_i+0x118>
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	462a      	mov	r2, r5
 8006740:	4639      	mov	r1, r7
 8006742:	4630      	mov	r0, r6
 8006744:	47c0      	blx	r8
 8006746:	3001      	adds	r0, #1
 8006748:	d0aa      	beq.n	80066a0 <_printf_i+0x12c>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	079b      	lsls	r3, r3, #30
 800674e:	d413      	bmi.n	8006778 <_printf_i+0x204>
 8006750:	68e0      	ldr	r0, [r4, #12]
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	4298      	cmp	r0, r3
 8006756:	bfb8      	it	lt
 8006758:	4618      	movlt	r0, r3
 800675a:	e7a3      	b.n	80066a4 <_printf_i+0x130>
 800675c:	2301      	movs	r3, #1
 800675e:	464a      	mov	r2, r9
 8006760:	4639      	mov	r1, r7
 8006762:	4630      	mov	r0, r6
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d09a      	beq.n	80066a0 <_printf_i+0x12c>
 800676a:	3501      	adds	r5, #1
 800676c:	68e3      	ldr	r3, [r4, #12]
 800676e:	9a03      	ldr	r2, [sp, #12]
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	42ab      	cmp	r3, r5
 8006774:	dcf2      	bgt.n	800675c <_printf_i+0x1e8>
 8006776:	e7eb      	b.n	8006750 <_printf_i+0x1dc>
 8006778:	2500      	movs	r5, #0
 800677a:	f104 0919 	add.w	r9, r4, #25
 800677e:	e7f5      	b.n	800676c <_printf_i+0x1f8>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ac      	bne.n	80066de <_printf_i+0x16a>
 8006784:	7803      	ldrb	r3, [r0, #0]
 8006786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800678a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800678e:	e76c      	b.n	800666a <_printf_i+0xf6>
 8006790:	08007099 	.word	0x08007099
 8006794:	080070aa 	.word	0x080070aa

08006798 <_scanf_chars>:
 8006798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679c:	4615      	mov	r5, r2
 800679e:	688a      	ldr	r2, [r1, #8]
 80067a0:	4680      	mov	r8, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b932      	cbnz	r2, 80067b4 <_scanf_chars+0x1c>
 80067a6:	698a      	ldr	r2, [r1, #24]
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	bf14      	ite	ne
 80067ac:	f04f 32ff 	movne.w	r2, #4294967295
 80067b0:	2201      	moveq	r2, #1
 80067b2:	608a      	str	r2, [r1, #8]
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	06d1      	lsls	r1, r2, #27
 80067b8:	bf5f      	itttt	pl
 80067ba:	681a      	ldrpl	r2, [r3, #0]
 80067bc:	1d11      	addpl	r1, r2, #4
 80067be:	6019      	strpl	r1, [r3, #0]
 80067c0:	6817      	ldrpl	r7, [r2, #0]
 80067c2:	2600      	movs	r6, #0
 80067c4:	69a3      	ldr	r3, [r4, #24]
 80067c6:	b1db      	cbz	r3, 8006800 <_scanf_chars+0x68>
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d107      	bne.n	80067dc <_scanf_chars+0x44>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	6962      	ldr	r2, [r4, #20]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	b9a3      	cbnz	r3, 8006800 <_scanf_chars+0x68>
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	d132      	bne.n	8006840 <_scanf_chars+0xa8>
 80067da:	e006      	b.n	80067ea <_scanf_chars+0x52>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d007      	beq.n	80067f0 <_scanf_chars+0x58>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	d12d      	bne.n	8006840 <_scanf_chars+0xa8>
 80067e4:	69a3      	ldr	r3, [r4, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d12a      	bne.n	8006840 <_scanf_chars+0xa8>
 80067ea:	2001      	movs	r0, #1
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	f000 fab4 	bl	8006d5c <__locale_ctype_ptr>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4418      	add	r0, r3
 80067fa:	7843      	ldrb	r3, [r0, #1]
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	d4ef      	bmi.n	80067e0 <_scanf_chars+0x48>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	06da      	lsls	r2, r3, #27
 8006804:	bf5e      	ittt	pl
 8006806:	682b      	ldrpl	r3, [r5, #0]
 8006808:	781b      	ldrbpl	r3, [r3, #0]
 800680a:	703b      	strbpl	r3, [r7, #0]
 800680c:	682a      	ldr	r2, [r5, #0]
 800680e:	686b      	ldr	r3, [r5, #4]
 8006810:	f102 0201 	add.w	r2, r2, #1
 8006814:	602a      	str	r2, [r5, #0]
 8006816:	68a2      	ldr	r2, [r4, #8]
 8006818:	f103 33ff 	add.w	r3, r3, #4294967295
 800681c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006820:	606b      	str	r3, [r5, #4]
 8006822:	f106 0601 	add.w	r6, r6, #1
 8006826:	bf58      	it	pl
 8006828:	3701      	addpl	r7, #1
 800682a:	60a2      	str	r2, [r4, #8]
 800682c:	b142      	cbz	r2, 8006840 <_scanf_chars+0xa8>
 800682e:	2b00      	cmp	r3, #0
 8006830:	dcc8      	bgt.n	80067c4 <_scanf_chars+0x2c>
 8006832:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006836:	4629      	mov	r1, r5
 8006838:	4640      	mov	r0, r8
 800683a:	4798      	blx	r3
 800683c:	2800      	cmp	r0, #0
 800683e:	d0c1      	beq.n	80067c4 <_scanf_chars+0x2c>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	f013 0310 	ands.w	r3, r3, #16
 8006846:	d105      	bne.n	8006854 <_scanf_chars+0xbc>
 8006848:	68e2      	ldr	r2, [r4, #12]
 800684a:	3201      	adds	r2, #1
 800684c:	60e2      	str	r2, [r4, #12]
 800684e:	69a2      	ldr	r2, [r4, #24]
 8006850:	b102      	cbz	r2, 8006854 <_scanf_chars+0xbc>
 8006852:	703b      	strb	r3, [r7, #0]
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	441e      	add	r6, r3
 8006858:	6126      	str	r6, [r4, #16]
 800685a:	2000      	movs	r0, #0
 800685c:	e7c6      	b.n	80067ec <_scanf_chars+0x54>
	...

08006860 <_scanf_i>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	469a      	mov	sl, r3
 8006866:	4b74      	ldr	r3, [pc, #464]	; (8006a38 <_scanf_i+0x1d8>)
 8006868:	460c      	mov	r4, r1
 800686a:	4683      	mov	fp, r0
 800686c:	4616      	mov	r6, r2
 800686e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006872:	b087      	sub	sp, #28
 8006874:	ab03      	add	r3, sp, #12
 8006876:	68a7      	ldr	r7, [r4, #8]
 8006878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800687c:	4b6f      	ldr	r3, [pc, #444]	; (8006a3c <_scanf_i+0x1dc>)
 800687e:	69a1      	ldr	r1, [r4, #24]
 8006880:	4a6f      	ldr	r2, [pc, #444]	; (8006a40 <_scanf_i+0x1e0>)
 8006882:	2903      	cmp	r1, #3
 8006884:	bf08      	it	eq
 8006886:	461a      	moveq	r2, r3
 8006888:	1e7b      	subs	r3, r7, #1
 800688a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800688e:	bf84      	itt	hi
 8006890:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006894:	60a3      	strhi	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800689e:	bf88      	it	hi
 80068a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068a4:	f104 091c 	add.w	r9, r4, #28
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bf8c      	ite	hi
 80068ac:	197f      	addhi	r7, r7, r5
 80068ae:	2700      	movls	r7, #0
 80068b0:	464b      	mov	r3, r9
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	6831      	ldr	r1, [r6, #0]
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	2202      	movs	r2, #2
 80068be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80068c2:	7809      	ldrb	r1, [r1, #0]
 80068c4:	f7f9 fc94 	bl	80001f0 <memchr>
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	b330      	cbz	r0, 800691a <_scanf_i+0xba>
 80068cc:	f1b8 0f01 	cmp.w	r8, #1
 80068d0:	d15a      	bne.n	8006988 <_scanf_i+0x128>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	b92a      	cbnz	r2, 80068e2 <_scanf_i+0x82>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	2108      	movs	r1, #8
 80068da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068de:	6061      	str	r1, [r4, #4]
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	68a2      	ldr	r2, [r4, #8]
 80068ec:	1e51      	subs	r1, r2, #1
 80068ee:	60a1      	str	r1, [r4, #8]
 80068f0:	b19a      	cbz	r2, 800691a <_scanf_i+0xba>
 80068f2:	6832      	ldr	r2, [r6, #0]
 80068f4:	1c51      	adds	r1, r2, #1
 80068f6:	6031      	str	r1, [r6, #0]
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	1c5d      	adds	r5, r3, #1
 80068fe:	6873      	ldr	r3, [r6, #4]
 8006900:	3b01      	subs	r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	6073      	str	r3, [r6, #4]
 8006906:	dc07      	bgt.n	8006918 <_scanf_i+0xb8>
 8006908:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800690c:	4631      	mov	r1, r6
 800690e:	4658      	mov	r0, fp
 8006910:	4798      	blx	r3
 8006912:	2800      	cmp	r0, #0
 8006914:	f040 8086 	bne.w	8006a24 <_scanf_i+0x1c4>
 8006918:	462b      	mov	r3, r5
 800691a:	f108 0801 	add.w	r8, r8, #1
 800691e:	f1b8 0f03 	cmp.w	r8, #3
 8006922:	d1c8      	bne.n	80068b6 <_scanf_i+0x56>
 8006924:	6862      	ldr	r2, [r4, #4]
 8006926:	b90a      	cbnz	r2, 800692c <_scanf_i+0xcc>
 8006928:	220a      	movs	r2, #10
 800692a:	6062      	str	r2, [r4, #4]
 800692c:	6862      	ldr	r2, [r4, #4]
 800692e:	4945      	ldr	r1, [pc, #276]	; (8006a44 <_scanf_i+0x1e4>)
 8006930:	6960      	ldr	r0, [r4, #20]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	1a89      	subs	r1, r1, r2
 8006936:	f000 f887 	bl	8006a48 <__sccl>
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	f04f 0800 	mov.w	r8, #0
 8006940:	461d      	mov	r5, r3
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d03a      	beq.n	80069c0 <_scanf_i+0x160>
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	6960      	ldr	r0, [r4, #20]
 800694e:	f891 c000 	ldrb.w	ip, [r1]
 8006952:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006956:	2800      	cmp	r0, #0
 8006958:	d032      	beq.n	80069c0 <_scanf_i+0x160>
 800695a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800695e:	d121      	bne.n	80069a4 <_scanf_i+0x144>
 8006960:	0510      	lsls	r0, r2, #20
 8006962:	d51f      	bpl.n	80069a4 <_scanf_i+0x144>
 8006964:	f108 0801 	add.w	r8, r8, #1
 8006968:	b117      	cbz	r7, 8006970 <_scanf_i+0x110>
 800696a:	3301      	adds	r3, #1
 800696c:	3f01      	subs	r7, #1
 800696e:	60a3      	str	r3, [r4, #8]
 8006970:	6873      	ldr	r3, [r6, #4]
 8006972:	3b01      	subs	r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	6073      	str	r3, [r6, #4]
 8006978:	dd1b      	ble.n	80069b2 <_scanf_i+0x152>
 800697a:	6833      	ldr	r3, [r6, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	68a3      	ldr	r3, [r4, #8]
 8006982:	3b01      	subs	r3, #1
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	e7dc      	b.n	8006942 <_scanf_i+0xe2>
 8006988:	f1b8 0f02 	cmp.w	r8, #2
 800698c:	d1ad      	bne.n	80068ea <_scanf_i+0x8a>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006994:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006998:	d1bf      	bne.n	800691a <_scanf_i+0xba>
 800699a:	2110      	movs	r1, #16
 800699c:	6061      	str	r1, [r4, #4]
 800699e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a2:	e7a1      	b.n	80068e8 <_scanf_i+0x88>
 80069a4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	780b      	ldrb	r3, [r1, #0]
 80069ac:	702b      	strb	r3, [r5, #0]
 80069ae:	3501      	adds	r5, #1
 80069b0:	e7de      	b.n	8006970 <_scanf_i+0x110>
 80069b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069b6:	4631      	mov	r1, r6
 80069b8:	4658      	mov	r0, fp
 80069ba:	4798      	blx	r3
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0df      	beq.n	8006980 <_scanf_i+0x120>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	05d9      	lsls	r1, r3, #23
 80069c4:	d50c      	bpl.n	80069e0 <_scanf_i+0x180>
 80069c6:	454d      	cmp	r5, r9
 80069c8:	d908      	bls.n	80069dc <_scanf_i+0x17c>
 80069ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80069ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d2:	4632      	mov	r2, r6
 80069d4:	4658      	mov	r0, fp
 80069d6:	4798      	blx	r3
 80069d8:	1e6f      	subs	r7, r5, #1
 80069da:	463d      	mov	r5, r7
 80069dc:	454d      	cmp	r5, r9
 80069de:	d029      	beq.n	8006a34 <_scanf_i+0x1d4>
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	f012 0210 	ands.w	r2, r2, #16
 80069e6:	d113      	bne.n	8006a10 <_scanf_i+0x1b0>
 80069e8:	702a      	strb	r2, [r5, #0]
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	9e00      	ldr	r6, [sp, #0]
 80069ee:	4649      	mov	r1, r9
 80069f0:	4658      	mov	r0, fp
 80069f2:	47b0      	blx	r6
 80069f4:	f8da 3000 	ldr.w	r3, [sl]
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	f8ca 2000 	str.w	r2, [sl]
 8006a00:	f011 0f20 	tst.w	r1, #32
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	d010      	beq.n	8006a2a <_scanf_i+0x1ca>
 8006a08:	6018      	str	r0, [r3, #0]
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60e3      	str	r3, [r4, #12]
 8006a10:	eba5 0509 	sub.w	r5, r5, r9
 8006a14:	44a8      	add	r8, r5
 8006a16:	6925      	ldr	r5, [r4, #16]
 8006a18:	4445      	add	r5, r8
 8006a1a:	6125      	str	r5, [r4, #16]
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	b007      	add	sp, #28
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	f04f 0800 	mov.w	r8, #0
 8006a28:	e7ca      	b.n	80069c0 <_scanf_i+0x160>
 8006a2a:	07ca      	lsls	r2, r1, #31
 8006a2c:	bf4c      	ite	mi
 8006a2e:	8018      	strhmi	r0, [r3, #0]
 8006a30:	6018      	strpl	r0, [r3, #0]
 8006a32:	e7ea      	b.n	8006a0a <_scanf_i+0x1aa>
 8006a34:	2001      	movs	r0, #1
 8006a36:	e7f2      	b.n	8006a1e <_scanf_i+0x1be>
 8006a38:	08007064 	.word	0x08007064
 8006a3c:	08006ba5 	.word	0x08006ba5
 8006a40:	08006cbd 	.word	0x08006cbd
 8006a44:	080070cb 	.word	0x080070cb

08006a48 <__sccl>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	780b      	ldrb	r3, [r1, #0]
 8006a4c:	2b5e      	cmp	r3, #94	; 0x5e
 8006a4e:	bf13      	iteet	ne
 8006a50:	1c4a      	addne	r2, r1, #1
 8006a52:	1c8a      	addeq	r2, r1, #2
 8006a54:	784b      	ldrbeq	r3, [r1, #1]
 8006a56:	2100      	movne	r1, #0
 8006a58:	bf08      	it	eq
 8006a5a:	2101      	moveq	r1, #1
 8006a5c:	1e44      	subs	r4, r0, #1
 8006a5e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006a62:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006a66:	42ac      	cmp	r4, r5
 8006a68:	d1fb      	bne.n	8006a62 <__sccl+0x1a>
 8006a6a:	b913      	cbnz	r3, 8006a72 <__sccl+0x2a>
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	4610      	mov	r0, r2
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	f081 0401 	eor.w	r4, r1, #1
 8006a76:	54c4      	strb	r4, [r0, r3]
 8006a78:	1c51      	adds	r1, r2, #1
 8006a7a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006a7e:	2d2d      	cmp	r5, #45	; 0x2d
 8006a80:	f101 36ff 	add.w	r6, r1, #4294967295
 8006a84:	460a      	mov	r2, r1
 8006a86:	d006      	beq.n	8006a96 <__sccl+0x4e>
 8006a88:	2d5d      	cmp	r5, #93	; 0x5d
 8006a8a:	d0f0      	beq.n	8006a6e <__sccl+0x26>
 8006a8c:	b90d      	cbnz	r5, 8006a92 <__sccl+0x4a>
 8006a8e:	4632      	mov	r2, r6
 8006a90:	e7ed      	b.n	8006a6e <__sccl+0x26>
 8006a92:	462b      	mov	r3, r5
 8006a94:	e7ef      	b.n	8006a76 <__sccl+0x2e>
 8006a96:	780e      	ldrb	r6, [r1, #0]
 8006a98:	2e5d      	cmp	r6, #93	; 0x5d
 8006a9a:	d0fa      	beq.n	8006a92 <__sccl+0x4a>
 8006a9c:	42b3      	cmp	r3, r6
 8006a9e:	dcf8      	bgt.n	8006a92 <__sccl+0x4a>
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	429e      	cmp	r6, r3
 8006aa4:	54c4      	strb	r4, [r0, r3]
 8006aa6:	dcfb      	bgt.n	8006aa0 <__sccl+0x58>
 8006aa8:	3102      	adds	r1, #2
 8006aaa:	e7e6      	b.n	8006a7a <__sccl+0x32>

08006aac <_strtol_l.isra.0>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	4689      	mov	r9, r1
 8006ab4:	4692      	mov	sl, r2
 8006ab6:	461e      	mov	r6, r3
 8006ab8:	460f      	mov	r7, r1
 8006aba:	463d      	mov	r5, r7
 8006abc:	9808      	ldr	r0, [sp, #32]
 8006abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac2:	f000 f947 	bl	8006d54 <__locale_ctype_ptr_l>
 8006ac6:	4420      	add	r0, r4
 8006ac8:	7843      	ldrb	r3, [r0, #1]
 8006aca:	f013 0308 	ands.w	r3, r3, #8
 8006ace:	d132      	bne.n	8006b36 <_strtol_l.isra.0+0x8a>
 8006ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ad2:	d132      	bne.n	8006b3a <_strtol_l.isra.0+0x8e>
 8006ad4:	787c      	ldrb	r4, [r7, #1]
 8006ad6:	1cbd      	adds	r5, r7, #2
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d05d      	beq.n	8006b9a <_strtol_l.isra.0+0xee>
 8006ade:	2e10      	cmp	r6, #16
 8006ae0:	d109      	bne.n	8006af6 <_strtol_l.isra.0+0x4a>
 8006ae2:	2c30      	cmp	r4, #48	; 0x30
 8006ae4:	d107      	bne.n	8006af6 <_strtol_l.isra.0+0x4a>
 8006ae6:	782b      	ldrb	r3, [r5, #0]
 8006ae8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006aec:	2b58      	cmp	r3, #88	; 0x58
 8006aee:	d14f      	bne.n	8006b90 <_strtol_l.isra.0+0xe4>
 8006af0:	786c      	ldrb	r4, [r5, #1]
 8006af2:	2610      	movs	r6, #16
 8006af4:	3502      	adds	r5, #2
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	bf14      	ite	ne
 8006afa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006afe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006b02:	2700      	movs	r7, #0
 8006b04:	fbb1 fcf6 	udiv	ip, r1, r6
 8006b08:	4638      	mov	r0, r7
 8006b0a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006b0e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d817      	bhi.n	8006b46 <_strtol_l.isra.0+0x9a>
 8006b16:	461c      	mov	r4, r3
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	dd23      	ble.n	8006b64 <_strtol_l.isra.0+0xb8>
 8006b1c:	1c7b      	adds	r3, r7, #1
 8006b1e:	d007      	beq.n	8006b30 <_strtol_l.isra.0+0x84>
 8006b20:	4584      	cmp	ip, r0
 8006b22:	d31c      	bcc.n	8006b5e <_strtol_l.isra.0+0xb2>
 8006b24:	d101      	bne.n	8006b2a <_strtol_l.isra.0+0x7e>
 8006b26:	45a6      	cmp	lr, r4
 8006b28:	db19      	blt.n	8006b5e <_strtol_l.isra.0+0xb2>
 8006b2a:	fb00 4006 	mla	r0, r0, r6, r4
 8006b2e:	2701      	movs	r7, #1
 8006b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b34:	e7eb      	b.n	8006b0e <_strtol_l.isra.0+0x62>
 8006b36:	462f      	mov	r7, r5
 8006b38:	e7bf      	b.n	8006aba <_strtol_l.isra.0+0xe>
 8006b3a:	2c2b      	cmp	r4, #43	; 0x2b
 8006b3c:	bf04      	itt	eq
 8006b3e:	1cbd      	addeq	r5, r7, #2
 8006b40:	787c      	ldrbeq	r4, [r7, #1]
 8006b42:	461a      	mov	r2, r3
 8006b44:	e7c9      	b.n	8006ada <_strtol_l.isra.0+0x2e>
 8006b46:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006b4a:	2b19      	cmp	r3, #25
 8006b4c:	d801      	bhi.n	8006b52 <_strtol_l.isra.0+0xa6>
 8006b4e:	3c37      	subs	r4, #55	; 0x37
 8006b50:	e7e2      	b.n	8006b18 <_strtol_l.isra.0+0x6c>
 8006b52:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006b56:	2b19      	cmp	r3, #25
 8006b58:	d804      	bhi.n	8006b64 <_strtol_l.isra.0+0xb8>
 8006b5a:	3c57      	subs	r4, #87	; 0x57
 8006b5c:	e7dc      	b.n	8006b18 <_strtol_l.isra.0+0x6c>
 8006b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8006b62:	e7e5      	b.n	8006b30 <_strtol_l.isra.0+0x84>
 8006b64:	1c7b      	adds	r3, r7, #1
 8006b66:	d108      	bne.n	8006b7a <_strtol_l.isra.0+0xce>
 8006b68:	2322      	movs	r3, #34	; 0x22
 8006b6a:	f8c8 3000 	str.w	r3, [r8]
 8006b6e:	4608      	mov	r0, r1
 8006b70:	f1ba 0f00 	cmp.w	sl, #0
 8006b74:	d107      	bne.n	8006b86 <_strtol_l.isra.0+0xda>
 8006b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7a:	b102      	cbz	r2, 8006b7e <_strtol_l.isra.0+0xd2>
 8006b7c:	4240      	negs	r0, r0
 8006b7e:	f1ba 0f00 	cmp.w	sl, #0
 8006b82:	d0f8      	beq.n	8006b76 <_strtol_l.isra.0+0xca>
 8006b84:	b10f      	cbz	r7, 8006b8a <_strtol_l.isra.0+0xde>
 8006b86:	f105 39ff 	add.w	r9, r5, #4294967295
 8006b8a:	f8ca 9000 	str.w	r9, [sl]
 8006b8e:	e7f2      	b.n	8006b76 <_strtol_l.isra.0+0xca>
 8006b90:	2430      	movs	r4, #48	; 0x30
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	d1af      	bne.n	8006af6 <_strtol_l.isra.0+0x4a>
 8006b96:	2608      	movs	r6, #8
 8006b98:	e7ad      	b.n	8006af6 <_strtol_l.isra.0+0x4a>
 8006b9a:	2c30      	cmp	r4, #48	; 0x30
 8006b9c:	d0a3      	beq.n	8006ae6 <_strtol_l.isra.0+0x3a>
 8006b9e:	260a      	movs	r6, #10
 8006ba0:	e7a9      	b.n	8006af6 <_strtol_l.isra.0+0x4a>
	...

08006ba4 <_strtol_r>:
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	4c06      	ldr	r4, [pc, #24]	; (8006bc0 <_strtol_r+0x1c>)
 8006ba8:	4d06      	ldr	r5, [pc, #24]	; (8006bc4 <_strtol_r+0x20>)
 8006baa:	6824      	ldr	r4, [r4, #0]
 8006bac:	6a24      	ldr	r4, [r4, #32]
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	bf08      	it	eq
 8006bb2:	462c      	moveq	r4, r5
 8006bb4:	9400      	str	r4, [sp, #0]
 8006bb6:	f7ff ff79 	bl	8006aac <_strtol_l.isra.0>
 8006bba:	b003      	add	sp, #12
 8006bbc:	bd30      	pop	{r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	2000000c 	.word	0x2000000c
 8006bc4:	20000070 	.word	0x20000070

08006bc8 <_strtoul_l.isra.0>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4689      	mov	r9, r1
 8006bd0:	4692      	mov	sl, r2
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	463d      	mov	r5, r7
 8006bd8:	9808      	ldr	r0, [sp, #32]
 8006bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bde:	f000 f8b9 	bl	8006d54 <__locale_ctype_ptr_l>
 8006be2:	4420      	add	r0, r4
 8006be4:	7843      	ldrb	r3, [r0, #1]
 8006be6:	f013 0308 	ands.w	r3, r3, #8
 8006bea:	d130      	bne.n	8006c4e <_strtoul_l.isra.0+0x86>
 8006bec:	2c2d      	cmp	r4, #45	; 0x2d
 8006bee:	d130      	bne.n	8006c52 <_strtoul_l.isra.0+0x8a>
 8006bf0:	787c      	ldrb	r4, [r7, #1]
 8006bf2:	1cbd      	adds	r5, r7, #2
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	d05c      	beq.n	8006cb4 <_strtoul_l.isra.0+0xec>
 8006bfa:	2e10      	cmp	r6, #16
 8006bfc:	d109      	bne.n	8006c12 <_strtoul_l.isra.0+0x4a>
 8006bfe:	2c30      	cmp	r4, #48	; 0x30
 8006c00:	d107      	bne.n	8006c12 <_strtoul_l.isra.0+0x4a>
 8006c02:	782b      	ldrb	r3, [r5, #0]
 8006c04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c08:	2b58      	cmp	r3, #88	; 0x58
 8006c0a:	d14e      	bne.n	8006caa <_strtoul_l.isra.0+0xe2>
 8006c0c:	786c      	ldrb	r4, [r5, #1]
 8006c0e:	2610      	movs	r6, #16
 8006c10:	3502      	adds	r5, #2
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	2300      	movs	r3, #0
 8006c18:	fbb2 f2f6 	udiv	r2, r2, r6
 8006c1c:	fb06 fc02 	mul.w	ip, r6, r2
 8006c20:	ea6f 0c0c 	mvn.w	ip, ip
 8006c24:	4618      	mov	r0, r3
 8006c26:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006c2a:	2f09      	cmp	r7, #9
 8006c2c:	d817      	bhi.n	8006c5e <_strtoul_l.isra.0+0x96>
 8006c2e:	463c      	mov	r4, r7
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	dd23      	ble.n	8006c7c <_strtoul_l.isra.0+0xb4>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	db1e      	blt.n	8006c76 <_strtoul_l.isra.0+0xae>
 8006c38:	4282      	cmp	r2, r0
 8006c3a:	d31c      	bcc.n	8006c76 <_strtoul_l.isra.0+0xae>
 8006c3c:	d101      	bne.n	8006c42 <_strtoul_l.isra.0+0x7a>
 8006c3e:	45a4      	cmp	ip, r4
 8006c40:	db19      	blt.n	8006c76 <_strtoul_l.isra.0+0xae>
 8006c42:	fb00 4006 	mla	r0, r0, r6, r4
 8006c46:	2301      	movs	r3, #1
 8006c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c4c:	e7eb      	b.n	8006c26 <_strtoul_l.isra.0+0x5e>
 8006c4e:	462f      	mov	r7, r5
 8006c50:	e7c1      	b.n	8006bd6 <_strtoul_l.isra.0+0xe>
 8006c52:	2c2b      	cmp	r4, #43	; 0x2b
 8006c54:	bf04      	itt	eq
 8006c56:	1cbd      	addeq	r5, r7, #2
 8006c58:	787c      	ldrbeq	r4, [r7, #1]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	e7cb      	b.n	8006bf6 <_strtoul_l.isra.0+0x2e>
 8006c5e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006c62:	2f19      	cmp	r7, #25
 8006c64:	d801      	bhi.n	8006c6a <_strtoul_l.isra.0+0xa2>
 8006c66:	3c37      	subs	r4, #55	; 0x37
 8006c68:	e7e2      	b.n	8006c30 <_strtoul_l.isra.0+0x68>
 8006c6a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006c6e:	2f19      	cmp	r7, #25
 8006c70:	d804      	bhi.n	8006c7c <_strtoul_l.isra.0+0xb4>
 8006c72:	3c57      	subs	r4, #87	; 0x57
 8006c74:	e7dc      	b.n	8006c30 <_strtoul_l.isra.0+0x68>
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	e7e5      	b.n	8006c48 <_strtoul_l.isra.0+0x80>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da09      	bge.n	8006c94 <_strtoul_l.isra.0+0xcc>
 8006c80:	2322      	movs	r3, #34	; 0x22
 8006c82:	f8c8 3000 	str.w	r3, [r8]
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	f1ba 0f00 	cmp.w	sl, #0
 8006c8e:	d107      	bne.n	8006ca0 <_strtoul_l.isra.0+0xd8>
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	b101      	cbz	r1, 8006c98 <_strtoul_l.isra.0+0xd0>
 8006c96:	4240      	negs	r0, r0
 8006c98:	f1ba 0f00 	cmp.w	sl, #0
 8006c9c:	d0f8      	beq.n	8006c90 <_strtoul_l.isra.0+0xc8>
 8006c9e:	b10b      	cbz	r3, 8006ca4 <_strtoul_l.isra.0+0xdc>
 8006ca0:	f105 39ff 	add.w	r9, r5, #4294967295
 8006ca4:	f8ca 9000 	str.w	r9, [sl]
 8006ca8:	e7f2      	b.n	8006c90 <_strtoul_l.isra.0+0xc8>
 8006caa:	2430      	movs	r4, #48	; 0x30
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	d1b0      	bne.n	8006c12 <_strtoul_l.isra.0+0x4a>
 8006cb0:	2608      	movs	r6, #8
 8006cb2:	e7ae      	b.n	8006c12 <_strtoul_l.isra.0+0x4a>
 8006cb4:	2c30      	cmp	r4, #48	; 0x30
 8006cb6:	d0a4      	beq.n	8006c02 <_strtoul_l.isra.0+0x3a>
 8006cb8:	260a      	movs	r6, #10
 8006cba:	e7aa      	b.n	8006c12 <_strtoul_l.isra.0+0x4a>

08006cbc <_strtoul_r>:
 8006cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cbe:	4c06      	ldr	r4, [pc, #24]	; (8006cd8 <_strtoul_r+0x1c>)
 8006cc0:	4d06      	ldr	r5, [pc, #24]	; (8006cdc <_strtoul_r+0x20>)
 8006cc2:	6824      	ldr	r4, [r4, #0]
 8006cc4:	6a24      	ldr	r4, [r4, #32]
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	bf08      	it	eq
 8006cca:	462c      	moveq	r4, r5
 8006ccc:	9400      	str	r4, [sp, #0]
 8006cce:	f7ff ff7b 	bl	8006bc8 <_strtoul_l.isra.0>
 8006cd2:	b003      	add	sp, #12
 8006cd4:	bd30      	pop	{r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000000c 	.word	0x2000000c
 8006cdc:	20000070 	.word	0x20000070

08006ce0 <__submore>:
 8006ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d11d      	bne.n	8006d2c <__submore+0x4c>
 8006cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cf4:	f000 f8c4 	bl	8006e80 <_malloc_r>
 8006cf8:	b918      	cbnz	r0, 8006d02 <__submore+0x22>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006d1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006d22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7e8      	b.n	8006cfe <__submore+0x1e>
 8006d2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d2e:	0077      	lsls	r7, r6, #1
 8006d30:	463a      	mov	r2, r7
 8006d32:	f000 f8ff 	bl	8006f34 <_realloc_r>
 8006d36:	4605      	mov	r5, r0
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0de      	beq.n	8006cfa <__submore+0x1a>
 8006d3c:	eb00 0806 	add.w	r8, r0, r6
 8006d40:	4601      	mov	r1, r0
 8006d42:	4632      	mov	r2, r6
 8006d44:	4640      	mov	r0, r8
 8006d46:	f000 f829 	bl	8006d9c <memcpy>
 8006d4a:	f8c4 8000 	str.w	r8, [r4]
 8006d4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006d52:	e7e9      	b.n	8006d28 <__submore+0x48>

08006d54 <__locale_ctype_ptr_l>:
 8006d54:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006d58:	4770      	bx	lr
	...

08006d5c <__locale_ctype_ptr>:
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <__locale_ctype_ptr+0x14>)
 8006d5e:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <__locale_ctype_ptr+0x18>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf08      	it	eq
 8006d68:	4613      	moveq	r3, r2
 8006d6a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006d6e:	4770      	bx	lr
 8006d70:	2000000c 	.word	0x2000000c
 8006d74:	20000070 	.word	0x20000070

08006d78 <__ascii_mbtowc>:
 8006d78:	b082      	sub	sp, #8
 8006d7a:	b901      	cbnz	r1, 8006d7e <__ascii_mbtowc+0x6>
 8006d7c:	a901      	add	r1, sp, #4
 8006d7e:	b142      	cbz	r2, 8006d92 <__ascii_mbtowc+0x1a>
 8006d80:	b14b      	cbz	r3, 8006d96 <__ascii_mbtowc+0x1e>
 8006d82:	7813      	ldrb	r3, [r2, #0]
 8006d84:	600b      	str	r3, [r1, #0]
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	1c10      	adds	r0, r2, #0
 8006d8a:	bf18      	it	ne
 8006d8c:	2001      	movne	r0, #1
 8006d8e:	b002      	add	sp, #8
 8006d90:	4770      	bx	lr
 8006d92:	4610      	mov	r0, r2
 8006d94:	e7fb      	b.n	8006d8e <__ascii_mbtowc+0x16>
 8006d96:	f06f 0001 	mvn.w	r0, #1
 8006d9a:	e7f8      	b.n	8006d8e <__ascii_mbtowc+0x16>

08006d9c <memcpy>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	1e43      	subs	r3, r0, #1
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	d100      	bne.n	8006da8 <memcpy+0xc>
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db0:	e7f7      	b.n	8006da2 <memcpy+0x6>

08006db2 <memmove>:
 8006db2:	4288      	cmp	r0, r1
 8006db4:	b510      	push	{r4, lr}
 8006db6:	eb01 0302 	add.w	r3, r1, r2
 8006dba:	d807      	bhi.n	8006dcc <memmove+0x1a>
 8006dbc:	1e42      	subs	r2, r0, #1
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d00a      	beq.n	8006dd8 <memmove+0x26>
 8006dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006dca:	e7f8      	b.n	8006dbe <memmove+0xc>
 8006dcc:	4283      	cmp	r3, r0
 8006dce:	d9f5      	bls.n	8006dbc <memmove+0xa>
 8006dd0:	1881      	adds	r1, r0, r2
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	42d3      	cmn	r3, r2
 8006dd6:	d100      	bne.n	8006dda <memmove+0x28>
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006de2:	e7f7      	b.n	8006dd4 <memmove+0x22>

08006de4 <_free_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4605      	mov	r5, r0
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d045      	beq.n	8006e78 <_free_r+0x94>
 8006dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df0:	1f0c      	subs	r4, r1, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfb8      	it	lt
 8006df6:	18e4      	addlt	r4, r4, r3
 8006df8:	f000 f8df 	bl	8006fba <__malloc_lock>
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <_free_r+0x98>)
 8006dfe:	6813      	ldr	r3, [r2, #0]
 8006e00:	4610      	mov	r0, r2
 8006e02:	b933      	cbnz	r3, 8006e12 <_free_r+0x2e>
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	6014      	str	r4, [r2, #0]
 8006e08:	4628      	mov	r0, r5
 8006e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e0e:	f000 b8d5 	b.w	8006fbc <__malloc_unlock>
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	d90c      	bls.n	8006e30 <_free_r+0x4c>
 8006e16:	6821      	ldr	r1, [r4, #0]
 8006e18:	1862      	adds	r2, r4, r1
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	bf04      	itt	eq
 8006e1e:	681a      	ldreq	r2, [r3, #0]
 8006e20:	685b      	ldreq	r3, [r3, #4]
 8006e22:	6063      	str	r3, [r4, #4]
 8006e24:	bf04      	itt	eq
 8006e26:	1852      	addeq	r2, r2, r1
 8006e28:	6022      	streq	r2, [r4, #0]
 8006e2a:	6004      	str	r4, [r0, #0]
 8006e2c:	e7ec      	b.n	8006e08 <_free_r+0x24>
 8006e2e:	4613      	mov	r3, r2
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	b10a      	cbz	r2, 8006e38 <_free_r+0x54>
 8006e34:	42a2      	cmp	r2, r4
 8006e36:	d9fa      	bls.n	8006e2e <_free_r+0x4a>
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	1858      	adds	r0, r3, r1
 8006e3c:	42a0      	cmp	r0, r4
 8006e3e:	d10b      	bne.n	8006e58 <_free_r+0x74>
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	4401      	add	r1, r0
 8006e44:	1858      	adds	r0, r3, r1
 8006e46:	4282      	cmp	r2, r0
 8006e48:	6019      	str	r1, [r3, #0]
 8006e4a:	d1dd      	bne.n	8006e08 <_free_r+0x24>
 8006e4c:	6810      	ldr	r0, [r2, #0]
 8006e4e:	6852      	ldr	r2, [r2, #4]
 8006e50:	605a      	str	r2, [r3, #4]
 8006e52:	4401      	add	r1, r0
 8006e54:	6019      	str	r1, [r3, #0]
 8006e56:	e7d7      	b.n	8006e08 <_free_r+0x24>
 8006e58:	d902      	bls.n	8006e60 <_free_r+0x7c>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	e7d3      	b.n	8006e08 <_free_r+0x24>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	1821      	adds	r1, r4, r0
 8006e64:	428a      	cmp	r2, r1
 8006e66:	bf04      	itt	eq
 8006e68:	6811      	ldreq	r1, [r2, #0]
 8006e6a:	6852      	ldreq	r2, [r2, #4]
 8006e6c:	6062      	str	r2, [r4, #4]
 8006e6e:	bf04      	itt	eq
 8006e70:	1809      	addeq	r1, r1, r0
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	605c      	str	r4, [r3, #4]
 8006e76:	e7c7      	b.n	8006e08 <_free_r+0x24>
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2000020c 	.word	0x2000020c

08006e80 <_malloc_r>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	1ccd      	adds	r5, r1, #3
 8006e84:	f025 0503 	bic.w	r5, r5, #3
 8006e88:	3508      	adds	r5, #8
 8006e8a:	2d0c      	cmp	r5, #12
 8006e8c:	bf38      	it	cc
 8006e8e:	250c      	movcc	r5, #12
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	4606      	mov	r6, r0
 8006e94:	db01      	blt.n	8006e9a <_malloc_r+0x1a>
 8006e96:	42a9      	cmp	r1, r5
 8006e98:	d903      	bls.n	8006ea2 <_malloc_r+0x22>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	f000 f88a 	bl	8006fba <__malloc_lock>
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <_malloc_r+0xac>)
 8006ea8:	6814      	ldr	r4, [r2, #0]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	b991      	cbnz	r1, 8006ed4 <_malloc_r+0x54>
 8006eae:	4c20      	ldr	r4, [pc, #128]	; (8006f30 <_malloc_r+0xb0>)
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	b91b      	cbnz	r3, 8006ebc <_malloc_r+0x3c>
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f000 f863 	bl	8006f80 <_sbrk_r>
 8006eba:	6020      	str	r0, [r4, #0]
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 f85e 	bl	8006f80 <_sbrk_r>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d124      	bne.n	8006f12 <_malloc_r+0x92>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f000 f875 	bl	8006fbc <__malloc_unlock>
 8006ed2:	e7e4      	b.n	8006e9e <_malloc_r+0x1e>
 8006ed4:	680b      	ldr	r3, [r1, #0]
 8006ed6:	1b5b      	subs	r3, r3, r5
 8006ed8:	d418      	bmi.n	8006f0c <_malloc_r+0x8c>
 8006eda:	2b0b      	cmp	r3, #11
 8006edc:	d90f      	bls.n	8006efe <_malloc_r+0x7e>
 8006ede:	600b      	str	r3, [r1, #0]
 8006ee0:	50cd      	str	r5, [r1, r3]
 8006ee2:	18cc      	adds	r4, r1, r3
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f869 	bl	8006fbc <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac3      	subs	r3, r0, r3
 8006ef6:	d0d3      	beq.n	8006ea0 <_malloc_r+0x20>
 8006ef8:	425a      	negs	r2, r3
 8006efa:	50e2      	str	r2, [r4, r3]
 8006efc:	e7d0      	b.n	8006ea0 <_malloc_r+0x20>
 8006efe:	428c      	cmp	r4, r1
 8006f00:	684b      	ldr	r3, [r1, #4]
 8006f02:	bf16      	itet	ne
 8006f04:	6063      	strne	r3, [r4, #4]
 8006f06:	6013      	streq	r3, [r2, #0]
 8006f08:	460c      	movne	r4, r1
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0x64>
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	6849      	ldr	r1, [r1, #4]
 8006f10:	e7cc      	b.n	8006eac <_malloc_r+0x2c>
 8006f12:	1cc4      	adds	r4, r0, #3
 8006f14:	f024 0403 	bic.w	r4, r4, #3
 8006f18:	42a0      	cmp	r0, r4
 8006f1a:	d005      	beq.n	8006f28 <_malloc_r+0xa8>
 8006f1c:	1a21      	subs	r1, r4, r0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f82e 	bl	8006f80 <_sbrk_r>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0cf      	beq.n	8006ec8 <_malloc_r+0x48>
 8006f28:	6025      	str	r5, [r4, #0]
 8006f2a:	e7db      	b.n	8006ee4 <_malloc_r+0x64>
 8006f2c:	2000020c 	.word	0x2000020c
 8006f30:	20000210 	.word	0x20000210

08006f34 <_realloc_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	4607      	mov	r7, r0
 8006f38:	4614      	mov	r4, r2
 8006f3a:	460e      	mov	r6, r1
 8006f3c:	b921      	cbnz	r1, 8006f48 <_realloc_r+0x14>
 8006f3e:	4611      	mov	r1, r2
 8006f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f44:	f7ff bf9c 	b.w	8006e80 <_malloc_r>
 8006f48:	b922      	cbnz	r2, 8006f54 <_realloc_r+0x20>
 8006f4a:	f7ff ff4b 	bl	8006de4 <_free_r>
 8006f4e:	4625      	mov	r5, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f54:	f000 f833 	bl	8006fbe <_malloc_usable_size_r>
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d20f      	bcs.n	8006f7c <_realloc_r+0x48>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ff8e 	bl	8006e80 <_malloc_r>
 8006f64:	4605      	mov	r5, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d0f2      	beq.n	8006f50 <_realloc_r+0x1c>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	f7ff ff15 	bl	8006d9c <memcpy>
 8006f72:	4631      	mov	r1, r6
 8006f74:	4638      	mov	r0, r7
 8006f76:	f7ff ff35 	bl	8006de4 <_free_r>
 8006f7a:	e7e9      	b.n	8006f50 <_realloc_r+0x1c>
 8006f7c:	4635      	mov	r5, r6
 8006f7e:	e7e7      	b.n	8006f50 <_realloc_r+0x1c>

08006f80 <_sbrk_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4c06      	ldr	r4, [pc, #24]	; (8006f9c <_sbrk_r+0x1c>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4605      	mov	r5, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	f7fe fe76 	bl	8005c7c <_sbrk>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d102      	bne.n	8006f9a <_sbrk_r+0x1a>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	b103      	cbz	r3, 8006f9a <_sbrk_r+0x1a>
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	2000042c 	.word	0x2000042c

08006fa0 <__ascii_wctomb>:
 8006fa0:	b149      	cbz	r1, 8006fb6 <__ascii_wctomb+0x16>
 8006fa2:	2aff      	cmp	r2, #255	; 0xff
 8006fa4:	bf85      	ittet	hi
 8006fa6:	238a      	movhi	r3, #138	; 0x8a
 8006fa8:	6003      	strhi	r3, [r0, #0]
 8006faa:	700a      	strbls	r2, [r1, #0]
 8006fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fb0:	bf98      	it	ls
 8006fb2:	2001      	movls	r0, #1
 8006fb4:	4770      	bx	lr
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4770      	bx	lr

08006fba <__malloc_lock>:
 8006fba:	4770      	bx	lr

08006fbc <__malloc_unlock>:
 8006fbc:	4770      	bx	lr

08006fbe <_malloc_usable_size_r>:
 8006fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc2:	1f18      	subs	r0, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfbc      	itt	lt
 8006fc8:	580b      	ldrlt	r3, [r1, r0]
 8006fca:	18c0      	addlt	r0, r0, r3
 8006fcc:	4770      	bx	lr
	...

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
